/*
Vikunja API

Testing SharingAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_SharingAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SharingAPIService NotificationsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SharingAPI.NotificationsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharingAPIService ProjectsIdTeamsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.SharingAPI.ProjectsIdTeamsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharingAPIService ProjectsIdTeamsPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.SharingAPI.ProjectsIdTeamsPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharingAPIService ProjectsIdUsersGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.SharingAPI.ProjectsIdUsersGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharingAPIService ProjectsIdUsersPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.SharingAPI.ProjectsIdUsersPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharingAPIService ProjectsProjectIDTeamsTeamIDDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectID int32
		var teamID int32

		resp, httpRes, err := apiClient.SharingAPI.ProjectsProjectIDTeamsTeamIDDelete(context.Background(), projectID, teamID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharingAPIService ProjectsProjectIDTeamsTeamIDPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectID int32
		var teamID int32

		resp, httpRes, err := apiClient.SharingAPI.ProjectsProjectIDTeamsTeamIDPost(context.Background(), projectID, teamID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharingAPIService ProjectsProjectIDUsersUserIDDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectID int32
		var userID int32

		resp, httpRes, err := apiClient.SharingAPI.ProjectsProjectIDUsersUserIDDelete(context.Background(), projectID, userID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharingAPIService ProjectsProjectIDUsersUserIDPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var projectID int32
		var userID int32

		resp, httpRes, err := apiClient.SharingAPI.ProjectsProjectIDUsersUserIDPost(context.Background(), projectID, userID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharingAPIService ProjectsProjectSharesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var project int32

		resp, httpRes, err := apiClient.SharingAPI.ProjectsProjectSharesGet(context.Background(), project).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharingAPIService ProjectsProjectSharesPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var project int32

		resp, httpRes, err := apiClient.SharingAPI.ProjectsProjectSharesPut(context.Background(), project).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharingAPIService ProjectsProjectSharesShareDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var project int32
		var share int32

		resp, httpRes, err := apiClient.SharingAPI.ProjectsProjectSharesShareDelete(context.Background(), project, share).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharingAPIService ProjectsProjectSharesShareGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var project int32
		var share int32

		resp, httpRes, err := apiClient.SharingAPI.ProjectsProjectSharesShareGet(context.Background(), project, share).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SharingAPIService SharesShareAuthPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var share string

		resp, httpRes, err := apiClient.SharingAPI.SharesShareAuthPost(context.Background(), share).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
