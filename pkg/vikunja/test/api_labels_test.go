/*
Vikunja API

Testing LabelsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_LabelsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LabelsAPIService LabelsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LabelsAPI.LabelsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LabelsAPIService LabelsIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.LabelsAPI.LabelsIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LabelsAPIService LabelsIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.LabelsAPI.LabelsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LabelsAPIService LabelsIdPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.LabelsAPI.LabelsIdPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LabelsAPIService LabelsPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LabelsAPI.LabelsPut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LabelsAPIService TasksTaskIDLabelsBulkPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taskID int32

		resp, httpRes, err := apiClient.LabelsAPI.TasksTaskIDLabelsBulkPost(context.Background(), taskID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LabelsAPIService TasksTaskLabelsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var task int32

		resp, httpRes, err := apiClient.LabelsAPI.TasksTaskLabelsGet(context.Background(), task).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LabelsAPIService TasksTaskLabelsLabelDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var task int32
		var label int32

		resp, httpRes, err := apiClient.LabelsAPI.TasksTaskLabelsLabelDelete(context.Background(), task, label).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LabelsAPIService TasksTaskLabelsPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var task int32

		resp, httpRes, err := apiClient.LabelsAPI.TasksTaskLabelsPut(context.Background(), task).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
