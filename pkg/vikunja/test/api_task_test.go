/*
Vikunja API

Testing TaskAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_TaskAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TaskAPIService KindIdReactionsDeletePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var kind int32

		resp, httpRes, err := apiClient.TaskAPI.KindIdReactionsDeletePost(context.Background(), id, kind).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService KindIdReactionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var kind int32

		resp, httpRes, err := apiClient.TaskAPI.KindIdReactionsGet(context.Background(), id, kind).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService KindIdReactionsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var kind int32

		resp, httpRes, err := apiClient.TaskAPI.KindIdReactionsPut(context.Background(), id, kind).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService ProjectsIdTasksPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.TaskAPI.ProjectsIdTasksPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService ProjectsIdViewsViewTasksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var view int32

		resp, httpRes, err := apiClient.TaskAPI.ProjectsIdViewsViewTasksGet(context.Background(), id, view).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService ProjectsProjectViewsViewBucketsBucketTasksPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var project int32
		var view int32
		var bucket int32

		resp, httpRes, err := apiClient.TaskAPI.ProjectsProjectViewsViewBucketsBucketTasksPost(context.Background(), project, view, bucket).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksAllGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TaskAPI.TasksAllGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksBulkPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TaskAPI.TasksBulkPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksIdAttachmentsAttachmentIDDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var attachmentID int32

		resp, httpRes, err := apiClient.TaskAPI.TasksIdAttachmentsAttachmentIDDelete(context.Background(), id, attachmentID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksIdAttachmentsAttachmentIDGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var attachmentID int32

		resp, httpRes, err := apiClient.TaskAPI.TasksIdAttachmentsAttachmentIDGet(context.Background(), id, attachmentID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksIdAttachmentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.TaskAPI.TasksIdAttachmentsGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksIdAttachmentsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.TaskAPI.TasksIdAttachmentsPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.TaskAPI.TasksIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.TaskAPI.TasksIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksIdPositionPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.TaskAPI.TasksIdPositionPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.TaskAPI.TasksIdPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksTaskIDCommentsCommentIDDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskID int32
		var commentID int32

		resp, httpRes, err := apiClient.TaskAPI.TasksTaskIDCommentsCommentIDDelete(context.Background(), taskID, commentID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksTaskIDCommentsCommentIDGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskID int32
		var commentID int32

		resp, httpRes, err := apiClient.TaskAPI.TasksTaskIDCommentsCommentIDGet(context.Background(), taskID, commentID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksTaskIDCommentsCommentIDPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskID int32
		var commentID int32

		resp, httpRes, err := apiClient.TaskAPI.TasksTaskIDCommentsCommentIDPost(context.Background(), taskID, commentID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksTaskIDCommentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskID int32

		resp, httpRes, err := apiClient.TaskAPI.TasksTaskIDCommentsGet(context.Background(), taskID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksTaskIDCommentsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskID int32

		resp, httpRes, err := apiClient.TaskAPI.TasksTaskIDCommentsPut(context.Background(), taskID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksTaskIDRelationsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskID int32

		resp, httpRes, err := apiClient.TaskAPI.TasksTaskIDRelationsPut(context.Background(), taskID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TaskAPIService TasksTaskIDRelationsRelationKindOtherTaskIDDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskID int32
		var relationKind string
		var otherTaskID int32

		resp, httpRes, err := apiClient.TaskAPI.TasksTaskIDRelationsRelationKindOtherTaskIDDelete(context.Background(), taskID, relationKind, otherTaskID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
