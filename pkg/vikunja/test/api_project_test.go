/*
Vikunja API

Testing ProjectAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ProjectAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProjectAPIService BackgroundsUnsplashImageImageGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var image int32

		resp, httpRes, err := apiClient.ProjectAPI.BackgroundsUnsplashImageImageGet(context.Background(), image).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService BackgroundsUnsplashImageImageThumbGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var image int32

		resp, httpRes, err := apiClient.ProjectAPI.BackgroundsUnsplashImageImageThumbGet(context.Background(), image).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService BackgroundsUnsplashSearchGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectAPI.BackgroundsUnsplashSearchGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsIdBackgroundDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsIdBackgroundDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsIdBackgroundGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsIdBackgroundGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsIdBackgroundsUnsplashPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsIdBackgroundsUnsplashPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsIdBackgroundsUploadPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsIdBackgroundsUploadPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsIdPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsIdProjectusersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsIdProjectusersGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsIdViewsViewBucketsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var view int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsIdViewsViewBucketsGet(context.Background(), id, view).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsIdViewsViewBucketsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32
		var view int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsIdViewsViewBucketsPut(context.Background(), id, view).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsProjectIDDuplicatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectID int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsProjectIDDuplicatePut(context.Background(), projectID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsProjectIDViewsViewBucketsBucketIDDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectID int32
		var bucketID int32
		var view int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsProjectIDViewsViewBucketsBucketIDDelete(context.Background(), projectID, bucketID, view).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsProjectIDViewsViewBucketsBucketIDPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectID int32
		var bucketID int32
		var view int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsProjectIDViewsViewBucketsBucketIDPost(context.Background(), projectID, bucketID, view).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsProjectViewsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var project int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsProjectViewsGet(context.Background(), project).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsProjectViewsIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var project int32
		var id int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsProjectViewsIdDelete(context.Background(), project, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsProjectViewsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var project int32
		var id int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsProjectViewsIdGet(context.Background(), project, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsProjectViewsIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var project int32
		var id int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsProjectViewsIdPost(context.Background(), project, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsProjectViewsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var project int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsProjectViewsPut(context.Background(), project).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectAPI.ProjectsPut(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
