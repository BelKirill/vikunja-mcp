/*
Vikunja API

Testing WebhooksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_WebhooksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WebhooksAPIService ProjectsIdWebhooksGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.WebhooksAPI.ProjectsIdWebhooksGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService ProjectsIdWebhooksPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.WebhooksAPI.ProjectsIdWebhooksPut(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService ProjectsIdWebhooksWebhookIDDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var webhookID int32

		resp, httpRes, err := apiClient.WebhooksAPI.ProjectsIdWebhooksWebhookIDDelete(context.Background(), id, webhookID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService ProjectsIdWebhooksWebhookIDPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var webhookID int32

		resp, httpRes, err := apiClient.WebhooksAPI.ProjectsIdWebhooksWebhookIDPost(context.Background(), id, webhookID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService WebhooksEventsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.WebhooksAPI.WebhooksEventsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
