/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelsProjectView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsProjectView{}

// ModelsProjectView struct for ModelsProjectView
type ModelsProjectView struct {
	// When the bucket configuration mode is not `manual`, this field holds the options of that configuration.
	BucketConfiguration []ModelsProjectViewBucketConfiguration `json:"bucket_configuration,omitempty"`
	// The bucket configuration mode. Can be `none`, `manual` or `filter`. `manual` allows to move tasks between buckets as you normally would. `filter` creates buckets based on a filter for each bucket.
	BucketConfigurationMode *ModelsBucketConfigurationModeKind `json:"bucket_configuration_mode,omitempty"`
	// A timestamp when this reaction was created. You cannot change this value.
	Created *string `json:"created,omitempty"`
	// The ID of the bucket where new tasks without a bucket are added to. By default, this is the leftmost bucket in a view.
	DefaultBucketId *int32 `json:"default_bucket_id,omitempty"`
	// If tasks are moved to the done bucket, they are marked as done. If they are marked as done individually, they are moved into the done bucket.
	DoneBucketId *int32 `json:"done_bucket_id,omitempty"`
	// The filter query to match tasks by. Check out https://vikunja.io/docs/filters for a full explanation.
	Filter *string `json:"filter,omitempty"`
	// The unique numeric id of this view
	Id *int32 `json:"id,omitempty"`
	// The position of this view in the list. The list of all views will be sorted by this parameter.
	Position *float32 `json:"position,omitempty"`
	// The project this view belongs to
	ProjectId *int32 `json:"project_id,omitempty"`
	// The title of this view
	Title *string `json:"title,omitempty"`
	// A timestamp when this view was updated. You cannot change this value.
	Updated *string `json:"updated,omitempty"`
	// The kind of this view. Can be `list`, `gantt`, `table` or `kanban`.
	ViewKind *ModelsProjectViewKind `json:"view_kind,omitempty"`
}

// NewModelsProjectView instantiates a new ModelsProjectView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsProjectView() *ModelsProjectView {
	this := ModelsProjectView{}
	return &this
}

// NewModelsProjectViewWithDefaults instantiates a new ModelsProjectView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsProjectViewWithDefaults() *ModelsProjectView {
	this := ModelsProjectView{}
	return &this
}

// GetBucketConfiguration returns the BucketConfiguration field value if set, zero value otherwise.
func (o *ModelsProjectView) GetBucketConfiguration() []ModelsProjectViewBucketConfiguration {
	if o == nil || IsNil(o.BucketConfiguration) {
		var ret []ModelsProjectViewBucketConfiguration
		return ret
	}
	return o.BucketConfiguration
}

// GetBucketConfigurationOk returns a tuple with the BucketConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectView) GetBucketConfigurationOk() ([]ModelsProjectViewBucketConfiguration, bool) {
	if o == nil || IsNil(o.BucketConfiguration) {
		return nil, false
	}
	return o.BucketConfiguration, true
}

// HasBucketConfiguration returns a boolean if a field has been set.
func (o *ModelsProjectView) HasBucketConfiguration() bool {
	if o != nil && !IsNil(o.BucketConfiguration) {
		return true
	}

	return false
}

// SetBucketConfiguration gets a reference to the given []ModelsProjectViewBucketConfiguration and assigns it to the BucketConfiguration field.
func (o *ModelsProjectView) SetBucketConfiguration(v []ModelsProjectViewBucketConfiguration) {
	o.BucketConfiguration = v
}

// GetBucketConfigurationMode returns the BucketConfigurationMode field value if set, zero value otherwise.
func (o *ModelsProjectView) GetBucketConfigurationMode() ModelsBucketConfigurationModeKind {
	if o == nil || IsNil(o.BucketConfigurationMode) {
		var ret ModelsBucketConfigurationModeKind
		return ret
	}
	return *o.BucketConfigurationMode
}

// GetBucketConfigurationModeOk returns a tuple with the BucketConfigurationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectView) GetBucketConfigurationModeOk() (*ModelsBucketConfigurationModeKind, bool) {
	if o == nil || IsNil(o.BucketConfigurationMode) {
		return nil, false
	}
	return o.BucketConfigurationMode, true
}

// HasBucketConfigurationMode returns a boolean if a field has been set.
func (o *ModelsProjectView) HasBucketConfigurationMode() bool {
	if o != nil && !IsNil(o.BucketConfigurationMode) {
		return true
	}

	return false
}

// SetBucketConfigurationMode gets a reference to the given ModelsBucketConfigurationModeKind and assigns it to the BucketConfigurationMode field.
func (o *ModelsProjectView) SetBucketConfigurationMode(v ModelsBucketConfigurationModeKind) {
	o.BucketConfigurationMode = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ModelsProjectView) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectView) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ModelsProjectView) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ModelsProjectView) SetCreated(v string) {
	o.Created = &v
}

// GetDefaultBucketId returns the DefaultBucketId field value if set, zero value otherwise.
func (o *ModelsProjectView) GetDefaultBucketId() int32 {
	if o == nil || IsNil(o.DefaultBucketId) {
		var ret int32
		return ret
	}
	return *o.DefaultBucketId
}

// GetDefaultBucketIdOk returns a tuple with the DefaultBucketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectView) GetDefaultBucketIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultBucketId) {
		return nil, false
	}
	return o.DefaultBucketId, true
}

// HasDefaultBucketId returns a boolean if a field has been set.
func (o *ModelsProjectView) HasDefaultBucketId() bool {
	if o != nil && !IsNil(o.DefaultBucketId) {
		return true
	}

	return false
}

// SetDefaultBucketId gets a reference to the given int32 and assigns it to the DefaultBucketId field.
func (o *ModelsProjectView) SetDefaultBucketId(v int32) {
	o.DefaultBucketId = &v
}

// GetDoneBucketId returns the DoneBucketId field value if set, zero value otherwise.
func (o *ModelsProjectView) GetDoneBucketId() int32 {
	if o == nil || IsNil(o.DoneBucketId) {
		var ret int32
		return ret
	}
	return *o.DoneBucketId
}

// GetDoneBucketIdOk returns a tuple with the DoneBucketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectView) GetDoneBucketIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DoneBucketId) {
		return nil, false
	}
	return o.DoneBucketId, true
}

// HasDoneBucketId returns a boolean if a field has been set.
func (o *ModelsProjectView) HasDoneBucketId() bool {
	if o != nil && !IsNil(o.DoneBucketId) {
		return true
	}

	return false
}

// SetDoneBucketId gets a reference to the given int32 and assigns it to the DoneBucketId field.
func (o *ModelsProjectView) SetDoneBucketId(v int32) {
	o.DoneBucketId = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *ModelsProjectView) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectView) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *ModelsProjectView) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *ModelsProjectView) SetFilter(v string) {
	o.Filter = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsProjectView) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectView) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsProjectView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsProjectView) SetId(v int32) {
	o.Id = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ModelsProjectView) GetPosition() float32 {
	if o == nil || IsNil(o.Position) {
		var ret float32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectView) GetPositionOk() (*float32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ModelsProjectView) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given float32 and assigns it to the Position field.
func (o *ModelsProjectView) SetPosition(v float32) {
	o.Position = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ModelsProjectView) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectView) GetProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ModelsProjectView) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ModelsProjectView) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ModelsProjectView) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectView) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ModelsProjectView) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ModelsProjectView) SetTitle(v string) {
	o.Title = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ModelsProjectView) GetUpdated() string {
	if o == nil || IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectView) GetUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ModelsProjectView) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *ModelsProjectView) SetUpdated(v string) {
	o.Updated = &v
}

// GetViewKind returns the ViewKind field value if set, zero value otherwise.
func (o *ModelsProjectView) GetViewKind() ModelsProjectViewKind {
	if o == nil || IsNil(o.ViewKind) {
		var ret ModelsProjectViewKind
		return ret
	}
	return *o.ViewKind
}

// GetViewKindOk returns a tuple with the ViewKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectView) GetViewKindOk() (*ModelsProjectViewKind, bool) {
	if o == nil || IsNil(o.ViewKind) {
		return nil, false
	}
	return o.ViewKind, true
}

// HasViewKind returns a boolean if a field has been set.
func (o *ModelsProjectView) HasViewKind() bool {
	if o != nil && !IsNil(o.ViewKind) {
		return true
	}

	return false
}

// SetViewKind gets a reference to the given ModelsProjectViewKind and assigns it to the ViewKind field.
func (o *ModelsProjectView) SetViewKind(v ModelsProjectViewKind) {
	o.ViewKind = &v
}

func (o ModelsProjectView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsProjectView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BucketConfiguration) {
		toSerialize["bucket_configuration"] = o.BucketConfiguration
	}
	if !IsNil(o.BucketConfigurationMode) {
		toSerialize["bucket_configuration_mode"] = o.BucketConfigurationMode
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.DefaultBucketId) {
		toSerialize["default_bucket_id"] = o.DefaultBucketId
	}
	if !IsNil(o.DoneBucketId) {
		toSerialize["done_bucket_id"] = o.DoneBucketId
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.ViewKind) {
		toSerialize["view_kind"] = o.ViewKind
	}
	return toSerialize, nil
}

type NullableModelsProjectView struct {
	value *ModelsProjectView
	isSet bool
}

func (v NullableModelsProjectView) Get() *ModelsProjectView {
	return v.value
}

func (v *NullableModelsProjectView) Set(val *ModelsProjectView) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsProjectView) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsProjectView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsProjectView(val *ModelsProjectView) *NullableModelsProjectView {
	return &NullableModelsProjectView{value: val, isSet: true}
}

func (v NullableModelsProjectView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsProjectView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


