/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelsTeamWithRight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsTeamWithRight{}

// ModelsTeamWithRight struct for ModelsTeamWithRight
type ModelsTeamWithRight struct {
	// A timestamp when this relation was created. You cannot change this value.
	Created *string `json:"created,omitempty"`
	// The user who created this team.
	CreatedBy *UserUser `json:"created_by,omitempty"`
	// The team's description.
	Description *string `json:"description,omitempty"`
	// The unique, numeric id of this team.
	Id *int32 `json:"id,omitempty"`
	// Query parameter controlling whether to include public projects or not
	IncludePublic *bool `json:"include_public,omitempty"`
	// Defines wether the team should be publicly discoverable when sharing a project
	IsPublic *bool `json:"is_public,omitempty"`
	// An array of all members in this team.
	Members []ModelsTeamUser `json:"members,omitempty"`
	// The name of this team.
	Name *string `json:"name,omitempty"`
	// The team's oidc id delivered by the oidc provider
	OidcId *string `json:"oidc_id,omitempty"`
	Right *ModelsRight `json:"right,omitempty"`
	// A timestamp when this relation was last updated. You cannot change this value.
	Updated *string `json:"updated,omitempty"`
}

// NewModelsTeamWithRight instantiates a new ModelsTeamWithRight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsTeamWithRight() *ModelsTeamWithRight {
	this := ModelsTeamWithRight{}
	return &this
}

// NewModelsTeamWithRightWithDefaults instantiates a new ModelsTeamWithRight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsTeamWithRightWithDefaults() *ModelsTeamWithRight {
	this := ModelsTeamWithRight{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ModelsTeamWithRight) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTeamWithRight) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ModelsTeamWithRight) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ModelsTeamWithRight) SetCreated(v string) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ModelsTeamWithRight) GetCreatedBy() UserUser {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserUser
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTeamWithRight) GetCreatedByOk() (*UserUser, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ModelsTeamWithRight) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserUser and assigns it to the CreatedBy field.
func (o *ModelsTeamWithRight) SetCreatedBy(v UserUser) {
	o.CreatedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelsTeamWithRight) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTeamWithRight) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelsTeamWithRight) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelsTeamWithRight) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsTeamWithRight) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTeamWithRight) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsTeamWithRight) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsTeamWithRight) SetId(v int32) {
	o.Id = &v
}

// GetIncludePublic returns the IncludePublic field value if set, zero value otherwise.
func (o *ModelsTeamWithRight) GetIncludePublic() bool {
	if o == nil || IsNil(o.IncludePublic) {
		var ret bool
		return ret
	}
	return *o.IncludePublic
}

// GetIncludePublicOk returns a tuple with the IncludePublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTeamWithRight) GetIncludePublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludePublic) {
		return nil, false
	}
	return o.IncludePublic, true
}

// HasIncludePublic returns a boolean if a field has been set.
func (o *ModelsTeamWithRight) HasIncludePublic() bool {
	if o != nil && !IsNil(o.IncludePublic) {
		return true
	}

	return false
}

// SetIncludePublic gets a reference to the given bool and assigns it to the IncludePublic field.
func (o *ModelsTeamWithRight) SetIncludePublic(v bool) {
	o.IncludePublic = &v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *ModelsTeamWithRight) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTeamWithRight) GetIsPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *ModelsTeamWithRight) HasIsPublic() bool {
	if o != nil && !IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *ModelsTeamWithRight) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *ModelsTeamWithRight) GetMembers() []ModelsTeamUser {
	if o == nil || IsNil(o.Members) {
		var ret []ModelsTeamUser
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTeamWithRight) GetMembersOk() ([]ModelsTeamUser, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *ModelsTeamWithRight) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []ModelsTeamUser and assigns it to the Members field.
func (o *ModelsTeamWithRight) SetMembers(v []ModelsTeamUser) {
	o.Members = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelsTeamWithRight) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTeamWithRight) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelsTeamWithRight) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelsTeamWithRight) SetName(v string) {
	o.Name = &v
}

// GetOidcId returns the OidcId field value if set, zero value otherwise.
func (o *ModelsTeamWithRight) GetOidcId() string {
	if o == nil || IsNil(o.OidcId) {
		var ret string
		return ret
	}
	return *o.OidcId
}

// GetOidcIdOk returns a tuple with the OidcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTeamWithRight) GetOidcIdOk() (*string, bool) {
	if o == nil || IsNil(o.OidcId) {
		return nil, false
	}
	return o.OidcId, true
}

// HasOidcId returns a boolean if a field has been set.
func (o *ModelsTeamWithRight) HasOidcId() bool {
	if o != nil && !IsNil(o.OidcId) {
		return true
	}

	return false
}

// SetOidcId gets a reference to the given string and assigns it to the OidcId field.
func (o *ModelsTeamWithRight) SetOidcId(v string) {
	o.OidcId = &v
}

// GetRight returns the Right field value if set, zero value otherwise.
func (o *ModelsTeamWithRight) GetRight() ModelsRight {
	if o == nil || IsNil(o.Right) {
		var ret ModelsRight
		return ret
	}
	return *o.Right
}

// GetRightOk returns a tuple with the Right field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTeamWithRight) GetRightOk() (*ModelsRight, bool) {
	if o == nil || IsNil(o.Right) {
		return nil, false
	}
	return o.Right, true
}

// HasRight returns a boolean if a field has been set.
func (o *ModelsTeamWithRight) HasRight() bool {
	if o != nil && !IsNil(o.Right) {
		return true
	}

	return false
}

// SetRight gets a reference to the given ModelsRight and assigns it to the Right field.
func (o *ModelsTeamWithRight) SetRight(v ModelsRight) {
	o.Right = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ModelsTeamWithRight) GetUpdated() string {
	if o == nil || IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTeamWithRight) GetUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ModelsTeamWithRight) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *ModelsTeamWithRight) SetUpdated(v string) {
	o.Updated = &v
}

func (o ModelsTeamWithRight) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsTeamWithRight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IncludePublic) {
		toSerialize["include_public"] = o.IncludePublic
	}
	if !IsNil(o.IsPublic) {
		toSerialize["is_public"] = o.IsPublic
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OidcId) {
		toSerialize["oidc_id"] = o.OidcId
	}
	if !IsNil(o.Right) {
		toSerialize["right"] = o.Right
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableModelsTeamWithRight struct {
	value *ModelsTeamWithRight
	isSet bool
}

func (v NullableModelsTeamWithRight) Get() *ModelsTeamWithRight {
	return v.value
}

func (v *NullableModelsTeamWithRight) Set(val *ModelsTeamWithRight) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTeamWithRight) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTeamWithRight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTeamWithRight(val *ModelsTeamWithRight) *NullableModelsTeamWithRight {
	return &NullableModelsTeamWithRight{value: val, isSet: true}
}

func (v NullableModelsTeamWithRight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTeamWithRight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


