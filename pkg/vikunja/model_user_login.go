/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserLogin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserLogin{}

// UserLogin struct for UserLogin
type UserLogin struct {
	// If true, the token returned will be valid a lot longer than default. Useful for \"remember me\" style logins.
	LongToken *bool `json:"long_token,omitempty"`
	// The password for the user.
	Password *string `json:"password,omitempty"`
	// The totp passcode of a user. Only needs to be provided when enabled.
	TotpPasscode *string `json:"totp_passcode,omitempty"`
	// The username used to log in.
	Username *string `json:"username,omitempty"`
}

// NewUserLogin instantiates a new UserLogin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLogin() *UserLogin {
	this := UserLogin{}
	return &this
}

// NewUserLoginWithDefaults instantiates a new UserLogin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLoginWithDefaults() *UserLogin {
	this := UserLogin{}
	return &this
}

// GetLongToken returns the LongToken field value if set, zero value otherwise.
func (o *UserLogin) GetLongToken() bool {
	if o == nil || IsNil(o.LongToken) {
		var ret bool
		return ret
	}
	return *o.LongToken
}

// GetLongTokenOk returns a tuple with the LongToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLogin) GetLongTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.LongToken) {
		return nil, false
	}
	return o.LongToken, true
}

// HasLongToken returns a boolean if a field has been set.
func (o *UserLogin) HasLongToken() bool {
	if o != nil && !IsNil(o.LongToken) {
		return true
	}

	return false
}

// SetLongToken gets a reference to the given bool and assigns it to the LongToken field.
func (o *UserLogin) SetLongToken(v bool) {
	o.LongToken = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserLogin) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLogin) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserLogin) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserLogin) SetPassword(v string) {
	o.Password = &v
}

// GetTotpPasscode returns the TotpPasscode field value if set, zero value otherwise.
func (o *UserLogin) GetTotpPasscode() string {
	if o == nil || IsNil(o.TotpPasscode) {
		var ret string
		return ret
	}
	return *o.TotpPasscode
}

// GetTotpPasscodeOk returns a tuple with the TotpPasscode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLogin) GetTotpPasscodeOk() (*string, bool) {
	if o == nil || IsNil(o.TotpPasscode) {
		return nil, false
	}
	return o.TotpPasscode, true
}

// HasTotpPasscode returns a boolean if a field has been set.
func (o *UserLogin) HasTotpPasscode() bool {
	if o != nil && !IsNil(o.TotpPasscode) {
		return true
	}

	return false
}

// SetTotpPasscode gets a reference to the given string and assigns it to the TotpPasscode field.
func (o *UserLogin) SetTotpPasscode(v string) {
	o.TotpPasscode = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserLogin) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLogin) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserLogin) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserLogin) SetUsername(v string) {
	o.Username = &v
}

func (o UserLogin) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserLogin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LongToken) {
		toSerialize["long_token"] = o.LongToken
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.TotpPasscode) {
		toSerialize["totp_passcode"] = o.TotpPasscode
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableUserLogin struct {
	value *UserLogin
	isSet bool
}

func (v NullableUserLogin) Get() *UserLogin {
	return v.value
}

func (v *NullableUserLogin) Set(val *UserLogin) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLogin) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLogin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLogin(val *UserLogin) *NullableUserLogin {
	return &NullableUserLogin{value: val, isSet: true}
}

func (v NullableUserLogin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLogin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
