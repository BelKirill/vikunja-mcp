/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelsProject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsProject{}

// ModelsProject struct for ModelsProject
type ModelsProject struct {
	// Contains a very small version of the project background to use as a blurry preview until the actual background is loaded. Check out https://blurha.sh/ to learn how it works.
	BackgroundBlurHash *string `json:"background_blur_hash,omitempty"`
	// Holds extra information about the background set since some background providers require attribution or similar. If not null, the background can be accessed at /projects/{projectID}/background
	BackgroundInformation map[string]interface{} `json:"background_information,omitempty"`
	// A timestamp when this project was created. You cannot change this value.
	Created *string `json:"created,omitempty"`
	// The description of the project.
	Description *string `json:"description,omitempty"`
	// The hex color of this project
	HexColor *string `json:"hex_color,omitempty"`
	// The unique, numeric id of this project.
	Id *int32 `json:"id,omitempty"`
	// The unique project short identifier. Used to build task identifiers.
	Identifier *string `json:"identifier,omitempty"`
	// Whether a project is archived.
	IsArchived *bool `json:"is_archived,omitempty"`
	// True if a project is a favorite. Favorite projects show up in a separate parent project. This value depends on the user making the call to the api.
	IsFavorite *bool `json:"is_favorite,omitempty"`
	// The user who created this project.
	Owner *UserUser `json:"owner,omitempty"`
	ParentProjectId *int32 `json:"parent_project_id,omitempty"`
	// The position this project has when querying all projects. See the tasks.position property on how to use this.
	Position *float32 `json:"position,omitempty"`
	// The subscription status for the user reading this project. You can only read this property, use the subscription endpoints to modify it. Will only returned when retreiving one project.
	Subscription *ModelsSubscription `json:"subscription,omitempty"`
	// The title of the project. You'll see this in the overview.
	Title *string `json:"title,omitempty"`
	// A timestamp when this project was last updated. You cannot change this value.
	Updated *string `json:"updated,omitempty"`
	Views []ModelsProjectView `json:"views,omitempty"`
}

// NewModelsProject instantiates a new ModelsProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsProject() *ModelsProject {
	this := ModelsProject{}
	return &this
}

// NewModelsProjectWithDefaults instantiates a new ModelsProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsProjectWithDefaults() *ModelsProject {
	this := ModelsProject{}
	return &this
}

// GetBackgroundBlurHash returns the BackgroundBlurHash field value if set, zero value otherwise.
func (o *ModelsProject) GetBackgroundBlurHash() string {
	if o == nil || IsNil(o.BackgroundBlurHash) {
		var ret string
		return ret
	}
	return *o.BackgroundBlurHash
}

// GetBackgroundBlurHashOk returns a tuple with the BackgroundBlurHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetBackgroundBlurHashOk() (*string, bool) {
	if o == nil || IsNil(o.BackgroundBlurHash) {
		return nil, false
	}
	return o.BackgroundBlurHash, true
}

// HasBackgroundBlurHash returns a boolean if a field has been set.
func (o *ModelsProject) HasBackgroundBlurHash() bool {
	if o != nil && !IsNil(o.BackgroundBlurHash) {
		return true
	}

	return false
}

// SetBackgroundBlurHash gets a reference to the given string and assigns it to the BackgroundBlurHash field.
func (o *ModelsProject) SetBackgroundBlurHash(v string) {
	o.BackgroundBlurHash = &v
}

// GetBackgroundInformation returns the BackgroundInformation field value if set, zero value otherwise.
func (o *ModelsProject) GetBackgroundInformation() map[string]interface{} {
	if o == nil || IsNil(o.BackgroundInformation) {
		var ret map[string]interface{}
		return ret
	}
	return o.BackgroundInformation
}

// GetBackgroundInformationOk returns a tuple with the BackgroundInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetBackgroundInformationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.BackgroundInformation) {
		return map[string]interface{}{}, false
	}
	return o.BackgroundInformation, true
}

// HasBackgroundInformation returns a boolean if a field has been set.
func (o *ModelsProject) HasBackgroundInformation() bool {
	if o != nil && !IsNil(o.BackgroundInformation) {
		return true
	}

	return false
}

// SetBackgroundInformation gets a reference to the given map[string]interface{} and assigns it to the BackgroundInformation field.
func (o *ModelsProject) SetBackgroundInformation(v map[string]interface{}) {
	o.BackgroundInformation = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ModelsProject) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ModelsProject) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ModelsProject) SetCreated(v string) {
	o.Created = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelsProject) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelsProject) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelsProject) SetDescription(v string) {
	o.Description = &v
}

// GetHexColor returns the HexColor field value if set, zero value otherwise.
func (o *ModelsProject) GetHexColor() string {
	if o == nil || IsNil(o.HexColor) {
		var ret string
		return ret
	}
	return *o.HexColor
}

// GetHexColorOk returns a tuple with the HexColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetHexColorOk() (*string, bool) {
	if o == nil || IsNil(o.HexColor) {
		return nil, false
	}
	return o.HexColor, true
}

// HasHexColor returns a boolean if a field has been set.
func (o *ModelsProject) HasHexColor() bool {
	if o != nil && !IsNil(o.HexColor) {
		return true
	}

	return false
}

// SetHexColor gets a reference to the given string and assigns it to the HexColor field.
func (o *ModelsProject) SetHexColor(v string) {
	o.HexColor = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsProject) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsProject) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsProject) SetId(v int32) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ModelsProject) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ModelsProject) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *ModelsProject) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetIsArchived returns the IsArchived field value if set, zero value otherwise.
func (o *ModelsProject) GetIsArchived() bool {
	if o == nil || IsNil(o.IsArchived) {
		var ret bool
		return ret
	}
	return *o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetIsArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsArchived) {
		return nil, false
	}
	return o.IsArchived, true
}

// HasIsArchived returns a boolean if a field has been set.
func (o *ModelsProject) HasIsArchived() bool {
	if o != nil && !IsNil(o.IsArchived) {
		return true
	}

	return false
}

// SetIsArchived gets a reference to the given bool and assigns it to the IsArchived field.
func (o *ModelsProject) SetIsArchived(v bool) {
	o.IsArchived = &v
}

// GetIsFavorite returns the IsFavorite field value if set, zero value otherwise.
func (o *ModelsProject) GetIsFavorite() bool {
	if o == nil || IsNil(o.IsFavorite) {
		var ret bool
		return ret
	}
	return *o.IsFavorite
}

// GetIsFavoriteOk returns a tuple with the IsFavorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetIsFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFavorite) {
		return nil, false
	}
	return o.IsFavorite, true
}

// HasIsFavorite returns a boolean if a field has been set.
func (o *ModelsProject) HasIsFavorite() bool {
	if o != nil && !IsNil(o.IsFavorite) {
		return true
	}

	return false
}

// SetIsFavorite gets a reference to the given bool and assigns it to the IsFavorite field.
func (o *ModelsProject) SetIsFavorite(v bool) {
	o.IsFavorite = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ModelsProject) GetOwner() UserUser {
	if o == nil || IsNil(o.Owner) {
		var ret UserUser
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetOwnerOk() (*UserUser, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ModelsProject) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given UserUser and assigns it to the Owner field.
func (o *ModelsProject) SetOwner(v UserUser) {
	o.Owner = &v
}

// GetParentProjectId returns the ParentProjectId field value if set, zero value otherwise.
func (o *ModelsProject) GetParentProjectId() int32 {
	if o == nil || IsNil(o.ParentProjectId) {
		var ret int32
		return ret
	}
	return *o.ParentProjectId
}

// GetParentProjectIdOk returns a tuple with the ParentProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetParentProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentProjectId) {
		return nil, false
	}
	return o.ParentProjectId, true
}

// HasParentProjectId returns a boolean if a field has been set.
func (o *ModelsProject) HasParentProjectId() bool {
	if o != nil && !IsNil(o.ParentProjectId) {
		return true
	}

	return false
}

// SetParentProjectId gets a reference to the given int32 and assigns it to the ParentProjectId field.
func (o *ModelsProject) SetParentProjectId(v int32) {
	o.ParentProjectId = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ModelsProject) GetPosition() float32 {
	if o == nil || IsNil(o.Position) {
		var ret float32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetPositionOk() (*float32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ModelsProject) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given float32 and assigns it to the Position field.
func (o *ModelsProject) SetPosition(v float32) {
	o.Position = &v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *ModelsProject) GetSubscription() ModelsSubscription {
	if o == nil || IsNil(o.Subscription) {
		var ret ModelsSubscription
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetSubscriptionOk() (*ModelsSubscription, bool) {
	if o == nil || IsNil(o.Subscription) {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *ModelsProject) HasSubscription() bool {
	if o != nil && !IsNil(o.Subscription) {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given ModelsSubscription and assigns it to the Subscription field.
func (o *ModelsProject) SetSubscription(v ModelsSubscription) {
	o.Subscription = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ModelsProject) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ModelsProject) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ModelsProject) SetTitle(v string) {
	o.Title = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ModelsProject) GetUpdated() string {
	if o == nil || IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ModelsProject) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *ModelsProject) SetUpdated(v string) {
	o.Updated = &v
}

// GetViews returns the Views field value if set, zero value otherwise.
func (o *ModelsProject) GetViews() []ModelsProjectView {
	if o == nil || IsNil(o.Views) {
		var ret []ModelsProjectView
		return ret
	}
	return o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProject) GetViewsOk() ([]ModelsProjectView, bool) {
	if o == nil || IsNil(o.Views) {
		return nil, false
	}
	return o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *ModelsProject) HasViews() bool {
	if o != nil && !IsNil(o.Views) {
		return true
	}

	return false
}

// SetViews gets a reference to the given []ModelsProjectView and assigns it to the Views field.
func (o *ModelsProject) SetViews(v []ModelsProjectView) {
	o.Views = v
}

func (o ModelsProject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsProject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackgroundBlurHash) {
		toSerialize["background_blur_hash"] = o.BackgroundBlurHash
	}
	if !IsNil(o.BackgroundInformation) {
		toSerialize["background_information"] = o.BackgroundInformation
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HexColor) {
		toSerialize["hex_color"] = o.HexColor
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.IsArchived) {
		toSerialize["is_archived"] = o.IsArchived
	}
	if !IsNil(o.IsFavorite) {
		toSerialize["is_favorite"] = o.IsFavorite
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.ParentProjectId) {
		toSerialize["parent_project_id"] = o.ParentProjectId
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Subscription) {
		toSerialize["subscription"] = o.Subscription
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Views) {
		toSerialize["views"] = o.Views
	}
	return toSerialize, nil
}

type NullableModelsProject struct {
	value *ModelsProject
	isSet bool
}

func (v NullableModelsProject) Get() *ModelsProject {
	return v.value
}

func (v *NullableModelsProject) Set(val *ModelsProject) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsProject) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsProject(val *ModelsProject) *NullableModelsProject {
	return &NullableModelsProject{value: val, isSet: true}
}

func (v NullableModelsProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


