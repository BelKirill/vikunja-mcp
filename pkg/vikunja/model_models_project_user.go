/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelsProjectUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsProjectUser{}

// ModelsProjectUser struct for ModelsProjectUser
type ModelsProjectUser struct {
	// A timestamp when this relation was created. You cannot change this value.
	Created *string `json:"created,omitempty"`
	// The unique, numeric id of this project <-> user relation.
	Id *int32 `json:"id,omitempty"`
	// The right this user has. 0 = Read only, 1 = Read & Write, 2 = Admin. See the docs for more details.
	Right *ModelsRight `json:"right,omitempty"`
	// A timestamp when this relation was last updated. You cannot change this value.
	Updated *string `json:"updated,omitempty"`
	// The username.
	UserId *string `json:"user_id,omitempty"`
}

// NewModelsProjectUser instantiates a new ModelsProjectUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsProjectUser() *ModelsProjectUser {
	this := ModelsProjectUser{}
	return &this
}

// NewModelsProjectUserWithDefaults instantiates a new ModelsProjectUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsProjectUserWithDefaults() *ModelsProjectUser {
	this := ModelsProjectUser{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ModelsProjectUser) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectUser) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ModelsProjectUser) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ModelsProjectUser) SetCreated(v string) {
	o.Created = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsProjectUser) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectUser) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsProjectUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsProjectUser) SetId(v int32) {
	o.Id = &v
}

// GetRight returns the Right field value if set, zero value otherwise.
func (o *ModelsProjectUser) GetRight() ModelsRight {
	if o == nil || IsNil(o.Right) {
		var ret ModelsRight
		return ret
	}
	return *o.Right
}

// GetRightOk returns a tuple with the Right field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectUser) GetRightOk() (*ModelsRight, bool) {
	if o == nil || IsNil(o.Right) {
		return nil, false
	}
	return o.Right, true
}

// HasRight returns a boolean if a field has been set.
func (o *ModelsProjectUser) HasRight() bool {
	if o != nil && !IsNil(o.Right) {
		return true
	}

	return false
}

// SetRight gets a reference to the given ModelsRight and assigns it to the Right field.
func (o *ModelsProjectUser) SetRight(v ModelsRight) {
	o.Right = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ModelsProjectUser) GetUpdated() string {
	if o == nil || IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectUser) GetUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ModelsProjectUser) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *ModelsProjectUser) SetUpdated(v string) {
	o.Updated = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ModelsProjectUser) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsProjectUser) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ModelsProjectUser) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ModelsProjectUser) SetUserId(v string) {
	o.UserId = &v
}

func (o ModelsProjectUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsProjectUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Right) {
		toSerialize["right"] = o.Right
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	return toSerialize, nil
}

type NullableModelsProjectUser struct {
	value *ModelsProjectUser
	isSet bool
}

func (v NullableModelsProjectUser) Get() *ModelsProjectUser {
	return v.value
}

func (v *NullableModelsProjectUser) Set(val *ModelsProjectUser) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsProjectUser) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsProjectUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsProjectUser(val *ModelsProjectUser) *NullableModelsProjectUser {
	return &NullableModelsProjectUser{value: val, isSet: true}
}

func (v NullableModelsProjectUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsProjectUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


