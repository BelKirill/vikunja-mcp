/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ModelsSharingType the model 'ModelsSharingType'
type ModelsSharingType int32

// List of models.SharingType
const (
	SharingTypeUnknown         ModelsSharingType = 0
	SharingTypeWithoutPassword ModelsSharingType = 1
	SharingTypeWithPassword    ModelsSharingType = 2
)

// All allowed values of ModelsSharingType enum
var AllowedModelsSharingTypeEnumValues = []ModelsSharingType{
	0,
	1,
	2,
}

func (v *ModelsSharingType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelsSharingType(value)
	for _, existing := range AllowedModelsSharingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelsSharingType", value)
}

// NewModelsSharingTypeFromValue returns a pointer to a valid ModelsSharingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelsSharingTypeFromValue(v int32) (*ModelsSharingType, error) {
	ev := ModelsSharingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelsSharingType: valid values are %v", v, AllowedModelsSharingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelsSharingType) IsValid() bool {
	for _, existing := range AllowedModelsSharingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to models.SharingType value
func (v ModelsSharingType) Ptr() *ModelsSharingType {
	return &v
}

type NullableModelsSharingType struct {
	value *ModelsSharingType
	isSet bool
}

func (v NullableModelsSharingType) Get() *ModelsSharingType {
	return v.value
}

func (v *NullableModelsSharingType) Set(val *ModelsSharingType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsSharingType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsSharingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsSharingType(val *ModelsSharingType) *NullableModelsSharingType {
	return &NullableModelsSharingType{value: val, isSet: true}
}

func (v NullableModelsSharingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsSharingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
