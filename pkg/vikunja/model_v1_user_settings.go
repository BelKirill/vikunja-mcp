/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1UserSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1UserSettings{}

// V1UserSettings struct for V1UserSettings
type V1UserSettings struct {
	// If a task is created without a specified project this value should be used. Applies to tasks made directly in API and from clients.
	DefaultProjectId *int32 `json:"default_project_id,omitempty"`
	// If true, the user can be found when searching for their exact email.
	DiscoverableByEmail *bool `json:"discoverable_by_email,omitempty"`
	// If true, this user can be found by their name or parts of it when searching for it.
	DiscoverableByName *bool `json:"discoverable_by_name,omitempty"`
	// If enabled, sends email reminders of tasks to the user.
	EmailRemindersEnabled *bool `json:"email_reminders_enabled,omitempty"`
	// Additional settings only used by the frontend
	FrontendSettings map[string]interface{} `json:"frontend_settings,omitempty"`
	// The user's language
	Language *string `json:"language,omitempty"`
	// The new name of the current user.
	Name *string `json:"name,omitempty"`
	// If enabled, the user will get an email for their overdue tasks each morning.
	OverdueTasksRemindersEnabled *bool `json:"overdue_tasks_reminders_enabled,omitempty"`
	// The time when the daily summary of overdue tasks will be sent via email.
	OverdueTasksRemindersTime *string `json:"overdue_tasks_reminders_time,omitempty"`
	// The user's time zone. Used to send task reminders in the time zone of the user.
	Timezone *string `json:"timezone,omitempty"`
	// The day when the week starts for this user. 0 = sunday, 1 = monday, etc.
	WeekStart *int32 `json:"week_start,omitempty"`
}

// NewV1UserSettings instantiates a new V1UserSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1UserSettings() *V1UserSettings {
	this := V1UserSettings{}
	return &this
}

// NewV1UserSettingsWithDefaults instantiates a new V1UserSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1UserSettingsWithDefaults() *V1UserSettings {
	this := V1UserSettings{}
	return &this
}

// GetDefaultProjectId returns the DefaultProjectId field value if set, zero value otherwise.
func (o *V1UserSettings) GetDefaultProjectId() int32 {
	if o == nil || IsNil(o.DefaultProjectId) {
		var ret int32
		return ret
	}
	return *o.DefaultProjectId
}

// GetDefaultProjectIdOk returns a tuple with the DefaultProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserSettings) GetDefaultProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultProjectId) {
		return nil, false
	}
	return o.DefaultProjectId, true
}

// HasDefaultProjectId returns a boolean if a field has been set.
func (o *V1UserSettings) HasDefaultProjectId() bool {
	if o != nil && !IsNil(o.DefaultProjectId) {
		return true
	}

	return false
}

// SetDefaultProjectId gets a reference to the given int32 and assigns it to the DefaultProjectId field.
func (o *V1UserSettings) SetDefaultProjectId(v int32) {
	o.DefaultProjectId = &v
}

// GetDiscoverableByEmail returns the DiscoverableByEmail field value if set, zero value otherwise.
func (o *V1UserSettings) GetDiscoverableByEmail() bool {
	if o == nil || IsNil(o.DiscoverableByEmail) {
		var ret bool
		return ret
	}
	return *o.DiscoverableByEmail
}

// GetDiscoverableByEmailOk returns a tuple with the DiscoverableByEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserSettings) GetDiscoverableByEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscoverableByEmail) {
		return nil, false
	}
	return o.DiscoverableByEmail, true
}

// HasDiscoverableByEmail returns a boolean if a field has been set.
func (o *V1UserSettings) HasDiscoverableByEmail() bool {
	if o != nil && !IsNil(o.DiscoverableByEmail) {
		return true
	}

	return false
}

// SetDiscoverableByEmail gets a reference to the given bool and assigns it to the DiscoverableByEmail field.
func (o *V1UserSettings) SetDiscoverableByEmail(v bool) {
	o.DiscoverableByEmail = &v
}

// GetDiscoverableByName returns the DiscoverableByName field value if set, zero value otherwise.
func (o *V1UserSettings) GetDiscoverableByName() bool {
	if o == nil || IsNil(o.DiscoverableByName) {
		var ret bool
		return ret
	}
	return *o.DiscoverableByName
}

// GetDiscoverableByNameOk returns a tuple with the DiscoverableByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserSettings) GetDiscoverableByNameOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscoverableByName) {
		return nil, false
	}
	return o.DiscoverableByName, true
}

// HasDiscoverableByName returns a boolean if a field has been set.
func (o *V1UserSettings) HasDiscoverableByName() bool {
	if o != nil && !IsNil(o.DiscoverableByName) {
		return true
	}

	return false
}

// SetDiscoverableByName gets a reference to the given bool and assigns it to the DiscoverableByName field.
func (o *V1UserSettings) SetDiscoverableByName(v bool) {
	o.DiscoverableByName = &v
}

// GetEmailRemindersEnabled returns the EmailRemindersEnabled field value if set, zero value otherwise.
func (o *V1UserSettings) GetEmailRemindersEnabled() bool {
	if o == nil || IsNil(o.EmailRemindersEnabled) {
		var ret bool
		return ret
	}
	return *o.EmailRemindersEnabled
}

// GetEmailRemindersEnabledOk returns a tuple with the EmailRemindersEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserSettings) GetEmailRemindersEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailRemindersEnabled) {
		return nil, false
	}
	return o.EmailRemindersEnabled, true
}

// HasEmailRemindersEnabled returns a boolean if a field has been set.
func (o *V1UserSettings) HasEmailRemindersEnabled() bool {
	if o != nil && !IsNil(o.EmailRemindersEnabled) {
		return true
	}

	return false
}

// SetEmailRemindersEnabled gets a reference to the given bool and assigns it to the EmailRemindersEnabled field.
func (o *V1UserSettings) SetEmailRemindersEnabled(v bool) {
	o.EmailRemindersEnabled = &v
}

// GetFrontendSettings returns the FrontendSettings field value if set, zero value otherwise.
func (o *V1UserSettings) GetFrontendSettings() map[string]interface{} {
	if o == nil || IsNil(o.FrontendSettings) {
		var ret map[string]interface{}
		return ret
	}
	return o.FrontendSettings
}

// GetFrontendSettingsOk returns a tuple with the FrontendSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserSettings) GetFrontendSettingsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FrontendSettings) {
		return map[string]interface{}{}, false
	}
	return o.FrontendSettings, true
}

// HasFrontendSettings returns a boolean if a field has been set.
func (o *V1UserSettings) HasFrontendSettings() bool {
	if o != nil && !IsNil(o.FrontendSettings) {
		return true
	}

	return false
}

// SetFrontendSettings gets a reference to the given map[string]interface{} and assigns it to the FrontendSettings field.
func (o *V1UserSettings) SetFrontendSettings(v map[string]interface{}) {
	o.FrontendSettings = v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *V1UserSettings) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserSettings) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *V1UserSettings) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *V1UserSettings) SetLanguage(v string) {
	o.Language = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1UserSettings) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserSettings) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1UserSettings) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1UserSettings) SetName(v string) {
	o.Name = &v
}

// GetOverdueTasksRemindersEnabled returns the OverdueTasksRemindersEnabled field value if set, zero value otherwise.
func (o *V1UserSettings) GetOverdueTasksRemindersEnabled() bool {
	if o == nil || IsNil(o.OverdueTasksRemindersEnabled) {
		var ret bool
		return ret
	}
	return *o.OverdueTasksRemindersEnabled
}

// GetOverdueTasksRemindersEnabledOk returns a tuple with the OverdueTasksRemindersEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserSettings) GetOverdueTasksRemindersEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.OverdueTasksRemindersEnabled) {
		return nil, false
	}
	return o.OverdueTasksRemindersEnabled, true
}

// HasOverdueTasksRemindersEnabled returns a boolean if a field has been set.
func (o *V1UserSettings) HasOverdueTasksRemindersEnabled() bool {
	if o != nil && !IsNil(o.OverdueTasksRemindersEnabled) {
		return true
	}

	return false
}

// SetOverdueTasksRemindersEnabled gets a reference to the given bool and assigns it to the OverdueTasksRemindersEnabled field.
func (o *V1UserSettings) SetOverdueTasksRemindersEnabled(v bool) {
	o.OverdueTasksRemindersEnabled = &v
}

// GetOverdueTasksRemindersTime returns the OverdueTasksRemindersTime field value if set, zero value otherwise.
func (o *V1UserSettings) GetOverdueTasksRemindersTime() string {
	if o == nil || IsNil(o.OverdueTasksRemindersTime) {
		var ret string
		return ret
	}
	return *o.OverdueTasksRemindersTime
}

// GetOverdueTasksRemindersTimeOk returns a tuple with the OverdueTasksRemindersTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserSettings) GetOverdueTasksRemindersTimeOk() (*string, bool) {
	if o == nil || IsNil(o.OverdueTasksRemindersTime) {
		return nil, false
	}
	return o.OverdueTasksRemindersTime, true
}

// HasOverdueTasksRemindersTime returns a boolean if a field has been set.
func (o *V1UserSettings) HasOverdueTasksRemindersTime() bool {
	if o != nil && !IsNil(o.OverdueTasksRemindersTime) {
		return true
	}

	return false
}

// SetOverdueTasksRemindersTime gets a reference to the given string and assigns it to the OverdueTasksRemindersTime field.
func (o *V1UserSettings) SetOverdueTasksRemindersTime(v string) {
	o.OverdueTasksRemindersTime = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *V1UserSettings) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserSettings) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *V1UserSettings) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *V1UserSettings) SetTimezone(v string) {
	o.Timezone = &v
}

// GetWeekStart returns the WeekStart field value if set, zero value otherwise.
func (o *V1UserSettings) GetWeekStart() int32 {
	if o == nil || IsNil(o.WeekStart) {
		var ret int32
		return ret
	}
	return *o.WeekStart
}

// GetWeekStartOk returns a tuple with the WeekStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserSettings) GetWeekStartOk() (*int32, bool) {
	if o == nil || IsNil(o.WeekStart) {
		return nil, false
	}
	return o.WeekStart, true
}

// HasWeekStart returns a boolean if a field has been set.
func (o *V1UserSettings) HasWeekStart() bool {
	if o != nil && !IsNil(o.WeekStart) {
		return true
	}

	return false
}

// SetWeekStart gets a reference to the given int32 and assigns it to the WeekStart field.
func (o *V1UserSettings) SetWeekStart(v int32) {
	o.WeekStart = &v
}

func (o V1UserSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1UserSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultProjectId) {
		toSerialize["default_project_id"] = o.DefaultProjectId
	}
	if !IsNil(o.DiscoverableByEmail) {
		toSerialize["discoverable_by_email"] = o.DiscoverableByEmail
	}
	if !IsNil(o.DiscoverableByName) {
		toSerialize["discoverable_by_name"] = o.DiscoverableByName
	}
	if !IsNil(o.EmailRemindersEnabled) {
		toSerialize["email_reminders_enabled"] = o.EmailRemindersEnabled
	}
	if !IsNil(o.FrontendSettings) {
		toSerialize["frontend_settings"] = o.FrontendSettings
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OverdueTasksRemindersEnabled) {
		toSerialize["overdue_tasks_reminders_enabled"] = o.OverdueTasksRemindersEnabled
	}
	if !IsNil(o.OverdueTasksRemindersTime) {
		toSerialize["overdue_tasks_reminders_time"] = o.OverdueTasksRemindersTime
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.WeekStart) {
		toSerialize["week_start"] = o.WeekStart
	}
	return toSerialize, nil
}

type NullableV1UserSettings struct {
	value *V1UserSettings
	isSet bool
}

func (v NullableV1UserSettings) Get() *V1UserSettings {
	return v.value
}

func (v *NullableV1UserSettings) Set(val *V1UserSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableV1UserSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableV1UserSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1UserSettings(val *V1UserSettings) *NullableV1UserSettings {
	return &NullableV1UserSettings{value: val, isSet: true}
}

func (v NullableV1UserSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1UserSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


