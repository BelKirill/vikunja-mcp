/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ModelsBucketConfigurationModeKind the model 'ModelsBucketConfigurationModeKind'
type ModelsBucketConfigurationModeKind int32

// List of models.BucketConfigurationModeKind
const (
	BucketConfigurationModeNone   ModelsBucketConfigurationModeKind = 0
	BucketConfigurationModeManual ModelsBucketConfigurationModeKind = 1
	BucketConfigurationModeFilter ModelsBucketConfigurationModeKind = 2
)

// All allowed values of ModelsBucketConfigurationModeKind enum
var AllowedModelsBucketConfigurationModeKindEnumValues = []ModelsBucketConfigurationModeKind{
	0,
	1,
	2,
}

func (v *ModelsBucketConfigurationModeKind) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelsBucketConfigurationModeKind(value)
	for _, existing := range AllowedModelsBucketConfigurationModeKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelsBucketConfigurationModeKind", value)
}

// NewModelsBucketConfigurationModeKindFromValue returns a pointer to a valid ModelsBucketConfigurationModeKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelsBucketConfigurationModeKindFromValue(v int32) (*ModelsBucketConfigurationModeKind, error) {
	ev := ModelsBucketConfigurationModeKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelsBucketConfigurationModeKind: valid values are %v", v, AllowedModelsBucketConfigurationModeKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelsBucketConfigurationModeKind) IsValid() bool {
	for _, existing := range AllowedModelsBucketConfigurationModeKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to models.BucketConfigurationModeKind value
func (v ModelsBucketConfigurationModeKind) Ptr() *ModelsBucketConfigurationModeKind {
	return &v
}

type NullableModelsBucketConfigurationModeKind struct {
	value *ModelsBucketConfigurationModeKind
	isSet bool
}

func (v NullableModelsBucketConfigurationModeKind) Get() *ModelsBucketConfigurationModeKind {
	return v.value
}

func (v *NullableModelsBucketConfigurationModeKind) Set(val *ModelsBucketConfigurationModeKind) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsBucketConfigurationModeKind) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsBucketConfigurationModeKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsBucketConfigurationModeKind(val *ModelsBucketConfigurationModeKind) *NullableModelsBucketConfigurationModeKind {
	return &NullableModelsBucketConfigurationModeKind{value: val, isSet: true}
}

func (v NullableModelsBucketConfigurationModeKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsBucketConfigurationModeKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
