/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelsTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsTask{}

// ModelsTask struct for ModelsTask
type ModelsTask struct {
	// An array of users who are assigned to this task
	Assignees []UserUser `json:"assignees,omitempty"`
	// All attachments this task has. This property is read-onlym, you must use the separate endpoint to add attachments to a task.
	Attachments []ModelsTaskAttachment `json:"attachments,omitempty"`
	// The bucket id. Will only be populated when the task is accessed via a view with buckets. Can be used to move a task between buckets. In that case, the new bucket must be in the same view as the old one.
	BucketId *int32 `json:"bucket_id,omitempty"`
	// If this task has a cover image, the field will return the id of the attachment that is the cover image.
	CoverImageAttachmentId *int32 `json:"cover_image_attachment_id,omitempty"`
	// A timestamp when this task was created. You cannot change this value.
	Created *string `json:"created,omitempty"`
	// The user who initially created the task.
	CreatedBy *UserUser `json:"created_by,omitempty"`
	// The task description.
	Description *string `json:"description,omitempty"`
	// Whether a task is done or not.
	Done *bool `json:"done,omitempty"`
	// The time when a task was marked as done.
	DoneAt *string `json:"done_at,omitempty"`
	// The time when the task is due.
	DueDate *string `json:"due_date,omitempty"`
	// When this task ends.
	EndDate *string `json:"end_date,omitempty"`
	// The task color in hex
	HexColor *string `json:"hex_color,omitempty"`
	// The unique, numeric id of this task.
	Id *int32 `json:"id,omitempty"`
	// The task identifier, based on the project identifier and the task's index
	Identifier *string `json:"identifier,omitempty"`
	// The task index, calculated per project
	Index *int32 `json:"index,omitempty"`
	// True if a task is a favorite task. Favorite tasks show up in a separate \"Important\" project. This value depends on the user making the call to the api.
	IsFavorite *bool `json:"is_favorite,omitempty"`
	// An array of labels which are associated with this task. This property is read-only, you must use the separate endpoint to add labels to a task.
	Labels []ModelsLabel `json:"labels,omitempty"`
	// Determines how far a task is left from being done
	PercentDone *float32 `json:"percent_done,omitempty"`
	// The position of the task - any task project can be sorted as usual by this parameter. When accessing tasks via views with buckets, this is primarily used to sort them based on a range. Positions are always saved per view. They will automatically be set if you request the tasks through a view endpoint, otherwise they will always be 0. To update them, take a look at the Task Position endpoint.
	Position *float32 `json:"position,omitempty"`
	// The task priority. Can be anything you want, it is possible to sort by this later.
	Priority *int32 `json:"priority,omitempty"`
	// The project this task belongs to.
	ProjectId *int32 `json:"project_id,omitempty"`
	// Reactions on that task.
	Reactions *map[string][]UserUser `json:"reactions,omitempty"`
	// All related tasks, grouped by their relation kind
	RelatedTasks *map[string][]ModelsTask `json:"related_tasks,omitempty"`
	// An array of reminders that are associated with this task.
	Reminders []ModelsTaskReminder `json:"reminders,omitempty"`
	// An amount in seconds this task repeats itself. If this is set, when marking the task as done, it will mark itself as \"undone\" and then increase all remindes and the due date by its amount.
	RepeatAfter *int32 `json:"repeat_after,omitempty"`
	// Can have three possible values which will trigger when the task is marked as done: 0 = repeats after the amount specified in repeat_after, 1 = repeats all dates each months (ignoring repeat_after), 3 = repeats from the current date rather than the last set date.
	RepeatMode *ModelsTaskRepeatMode `json:"repeat_mode,omitempty"`
	// When this task starts.
	StartDate *string `json:"start_date,omitempty"`
	// The subscription status for the user reading this task. You can only read this property, use the subscription endpoints to modify it. Will only returned when retrieving one task.
	Subscription *ModelsSubscription `json:"subscription,omitempty"`
	// The task text. This is what you'll see in the project.
	Title *string `json:"title,omitempty"`
	// A timestamp when this task was last updated. You cannot change this value.
	Updated *string `json:"updated,omitempty"`
}

// NewModelsTask instantiates a new ModelsTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsTask() *ModelsTask {
	this := ModelsTask{}
	return &this
}

// NewModelsTaskWithDefaults instantiates a new ModelsTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsTaskWithDefaults() *ModelsTask {
	this := ModelsTask{}
	return &this
}

// GetAssignees returns the Assignees field value if set, zero value otherwise.
func (o *ModelsTask) GetAssignees() []UserUser {
	if o == nil || IsNil(o.Assignees) {
		var ret []UserUser
		return ret
	}
	return o.Assignees
}

// GetAssigneesOk returns a tuple with the Assignees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetAssigneesOk() ([]UserUser, bool) {
	if o == nil || IsNil(o.Assignees) {
		return nil, false
	}
	return o.Assignees, true
}

// HasAssignees returns a boolean if a field has been set.
func (o *ModelsTask) HasAssignees() bool {
	if o != nil && !IsNil(o.Assignees) {
		return true
	}

	return false
}

// SetAssignees gets a reference to the given []UserUser and assigns it to the Assignees field.
func (o *ModelsTask) SetAssignees(v []UserUser) {
	o.Assignees = v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *ModelsTask) GetAttachments() []ModelsTaskAttachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []ModelsTaskAttachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetAttachmentsOk() ([]ModelsTaskAttachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *ModelsTask) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []ModelsTaskAttachment and assigns it to the Attachments field.
func (o *ModelsTask) SetAttachments(v []ModelsTaskAttachment) {
	o.Attachments = v
}

// GetBucketId returns the BucketId field value if set, zero value otherwise.
func (o *ModelsTask) GetBucketId() int32 {
	if o == nil || IsNil(o.BucketId) {
		var ret int32
		return ret
	}
	return *o.BucketId
}

// GetBucketIdOk returns a tuple with the BucketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetBucketIdOk() (*int32, bool) {
	if o == nil || IsNil(o.BucketId) {
		return nil, false
	}
	return o.BucketId, true
}

// HasBucketId returns a boolean if a field has been set.
func (o *ModelsTask) HasBucketId() bool {
	if o != nil && !IsNil(o.BucketId) {
		return true
	}

	return false
}

// SetBucketId gets a reference to the given int32 and assigns it to the BucketId field.
func (o *ModelsTask) SetBucketId(v int32) {
	o.BucketId = &v
}

// GetCoverImageAttachmentId returns the CoverImageAttachmentId field value if set, zero value otherwise.
func (o *ModelsTask) GetCoverImageAttachmentId() int32 {
	if o == nil || IsNil(o.CoverImageAttachmentId) {
		var ret int32
		return ret
	}
	return *o.CoverImageAttachmentId
}

// GetCoverImageAttachmentIdOk returns a tuple with the CoverImageAttachmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetCoverImageAttachmentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CoverImageAttachmentId) {
		return nil, false
	}
	return o.CoverImageAttachmentId, true
}

// HasCoverImageAttachmentId returns a boolean if a field has been set.
func (o *ModelsTask) HasCoverImageAttachmentId() bool {
	if o != nil && !IsNil(o.CoverImageAttachmentId) {
		return true
	}

	return false
}

// SetCoverImageAttachmentId gets a reference to the given int32 and assigns it to the CoverImageAttachmentId field.
func (o *ModelsTask) SetCoverImageAttachmentId(v int32) {
	o.CoverImageAttachmentId = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ModelsTask) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ModelsTask) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ModelsTask) SetCreated(v string) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ModelsTask) GetCreatedBy() UserUser {
	if o == nil || IsNil(o.CreatedBy) {
		var ret UserUser
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetCreatedByOk() (*UserUser, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ModelsTask) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given UserUser and assigns it to the CreatedBy field.
func (o *ModelsTask) SetCreatedBy(v UserUser) {
	o.CreatedBy = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelsTask) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelsTask) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelsTask) SetDescription(v string) {
	o.Description = &v
}

// GetDone returns the Done field value if set, zero value otherwise.
func (o *ModelsTask) GetDone() bool {
	if o == nil || IsNil(o.Done) {
		var ret bool
		return ret
	}
	return *o.Done
}

// GetDoneOk returns a tuple with the Done field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetDoneOk() (*bool, bool) {
	if o == nil || IsNil(o.Done) {
		return nil, false
	}
	return o.Done, true
}

// HasDone returns a boolean if a field has been set.
func (o *ModelsTask) HasDone() bool {
	if o != nil && !IsNil(o.Done) {
		return true
	}

	return false
}

// SetDone gets a reference to the given bool and assigns it to the Done field.
func (o *ModelsTask) SetDone(v bool) {
	o.Done = &v
}

// GetDoneAt returns the DoneAt field value if set, zero value otherwise.
func (o *ModelsTask) GetDoneAt() string {
	if o == nil || IsNil(o.DoneAt) {
		var ret string
		return ret
	}
	return *o.DoneAt
}

// GetDoneAtOk returns a tuple with the DoneAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetDoneAtOk() (*string, bool) {
	if o == nil || IsNil(o.DoneAt) {
		return nil, false
	}
	return o.DoneAt, true
}

// HasDoneAt returns a boolean if a field has been set.
func (o *ModelsTask) HasDoneAt() bool {
	if o != nil && !IsNil(o.DoneAt) {
		return true
	}

	return false
}

// SetDoneAt gets a reference to the given string and assigns it to the DoneAt field.
func (o *ModelsTask) SetDoneAt(v string) {
	o.DoneAt = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *ModelsTask) GetDueDate() string {
	if o == nil || IsNil(o.DueDate) {
		var ret string
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetDueDateOk() (*string, bool) {
	if o == nil || IsNil(o.DueDate) {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *ModelsTask) HasDueDate() bool {
	if o != nil && !IsNil(o.DueDate) {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given string and assigns it to the DueDate field.
func (o *ModelsTask) SetDueDate(v string) {
	o.DueDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ModelsTask) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ModelsTask) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ModelsTask) SetEndDate(v string) {
	o.EndDate = &v
}

// GetHexColor returns the HexColor field value if set, zero value otherwise.
func (o *ModelsTask) GetHexColor() string {
	if o == nil || IsNil(o.HexColor) {
		var ret string
		return ret
	}
	return *o.HexColor
}

// GetHexColorOk returns a tuple with the HexColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetHexColorOk() (*string, bool) {
	if o == nil || IsNil(o.HexColor) {
		return nil, false
	}
	return o.HexColor, true
}

// HasHexColor returns a boolean if a field has been set.
func (o *ModelsTask) HasHexColor() bool {
	if o != nil && !IsNil(o.HexColor) {
		return true
	}

	return false
}

// SetHexColor gets a reference to the given string and assigns it to the HexColor field.
func (o *ModelsTask) SetHexColor(v string) {
	o.HexColor = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsTask) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsTask) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsTask) SetId(v int32) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ModelsTask) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ModelsTask) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *ModelsTask) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ModelsTask) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ModelsTask) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *ModelsTask) SetIndex(v int32) {
	o.Index = &v
}

// GetIsFavorite returns the IsFavorite field value if set, zero value otherwise.
func (o *ModelsTask) GetIsFavorite() bool {
	if o == nil || IsNil(o.IsFavorite) {
		var ret bool
		return ret
	}
	return *o.IsFavorite
}

// GetIsFavoriteOk returns a tuple with the IsFavorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetIsFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFavorite) {
		return nil, false
	}
	return o.IsFavorite, true
}

// HasIsFavorite returns a boolean if a field has been set.
func (o *ModelsTask) HasIsFavorite() bool {
	if o != nil && !IsNil(o.IsFavorite) {
		return true
	}

	return false
}

// SetIsFavorite gets a reference to the given bool and assigns it to the IsFavorite field.
func (o *ModelsTask) SetIsFavorite(v bool) {
	o.IsFavorite = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ModelsTask) GetLabels() []ModelsLabel {
	if o == nil || IsNil(o.Labels) {
		var ret []ModelsLabel
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetLabelsOk() ([]ModelsLabel, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ModelsTask) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []ModelsLabel and assigns it to the Labels field.
func (o *ModelsTask) SetLabels(v []ModelsLabel) {
	o.Labels = v
}

// GetPercentDone returns the PercentDone field value if set, zero value otherwise.
func (o *ModelsTask) GetPercentDone() float32 {
	if o == nil || IsNil(o.PercentDone) {
		var ret float32
		return ret
	}
	return *o.PercentDone
}

// GetPercentDoneOk returns a tuple with the PercentDone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetPercentDoneOk() (*float32, bool) {
	if o == nil || IsNil(o.PercentDone) {
		return nil, false
	}
	return o.PercentDone, true
}

// HasPercentDone returns a boolean if a field has been set.
func (o *ModelsTask) HasPercentDone() bool {
	if o != nil && !IsNil(o.PercentDone) {
		return true
	}

	return false
}

// SetPercentDone gets a reference to the given float32 and assigns it to the PercentDone field.
func (o *ModelsTask) SetPercentDone(v float32) {
	o.PercentDone = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ModelsTask) GetPosition() float32 {
	if o == nil || IsNil(o.Position) {
		var ret float32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetPositionOk() (*float32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ModelsTask) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given float32 and assigns it to the Position field.
func (o *ModelsTask) SetPosition(v float32) {
	o.Position = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ModelsTask) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ModelsTask) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *ModelsTask) SetPriority(v int32) {
	o.Priority = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ModelsTask) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ModelsTask) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ModelsTask) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
func (o *ModelsTask) GetReactions() map[string][]UserUser {
	if o == nil || IsNil(o.Reactions) {
		var ret map[string][]UserUser
		return ret
	}
	return *o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetReactionsOk() (*map[string][]UserUser, bool) {
	if o == nil || IsNil(o.Reactions) {
		return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *ModelsTask) HasReactions() bool {
	if o != nil && !IsNil(o.Reactions) {
		return true
	}

	return false
}

// SetReactions gets a reference to the given map[string][]UserUser and assigns it to the Reactions field.
func (o *ModelsTask) SetReactions(v map[string][]UserUser) {
	o.Reactions = &v
}

// GetRelatedTasks returns the RelatedTasks field value if set, zero value otherwise.
func (o *ModelsTask) GetRelatedTasks() map[string][]ModelsTask {
	if o == nil || IsNil(o.RelatedTasks) {
		var ret map[string][]ModelsTask
		return ret
	}
	return *o.RelatedTasks
}

// GetRelatedTasksOk returns a tuple with the RelatedTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetRelatedTasksOk() (*map[string][]ModelsTask, bool) {
	if o == nil || IsNil(o.RelatedTasks) {
		return nil, false
	}
	return o.RelatedTasks, true
}

// HasRelatedTasks returns a boolean if a field has been set.
func (o *ModelsTask) HasRelatedTasks() bool {
	if o != nil && !IsNil(o.RelatedTasks) {
		return true
	}

	return false
}

// SetRelatedTasks gets a reference to the given map[string][]ModelsTask and assigns it to the RelatedTasks field.
func (o *ModelsTask) SetRelatedTasks(v map[string][]ModelsTask) {
	o.RelatedTasks = &v
}

// GetReminders returns the Reminders field value if set, zero value otherwise.
func (o *ModelsTask) GetReminders() []ModelsTaskReminder {
	if o == nil || IsNil(o.Reminders) {
		var ret []ModelsTaskReminder
		return ret
	}
	return o.Reminders
}

// GetRemindersOk returns a tuple with the Reminders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetRemindersOk() ([]ModelsTaskReminder, bool) {
	if o == nil || IsNil(o.Reminders) {
		return nil, false
	}
	return o.Reminders, true
}

// HasReminders returns a boolean if a field has been set.
func (o *ModelsTask) HasReminders() bool {
	if o != nil && !IsNil(o.Reminders) {
		return true
	}

	return false
}

// SetReminders gets a reference to the given []ModelsTaskReminder and assigns it to the Reminders field.
func (o *ModelsTask) SetReminders(v []ModelsTaskReminder) {
	o.Reminders = v
}

// GetRepeatAfter returns the RepeatAfter field value if set, zero value otherwise.
func (o *ModelsTask) GetRepeatAfter() int32 {
	if o == nil || IsNil(o.RepeatAfter) {
		var ret int32
		return ret
	}
	return *o.RepeatAfter
}

// GetRepeatAfterOk returns a tuple with the RepeatAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetRepeatAfterOk() (*int32, bool) {
	if o == nil || IsNil(o.RepeatAfter) {
		return nil, false
	}
	return o.RepeatAfter, true
}

// HasRepeatAfter returns a boolean if a field has been set.
func (o *ModelsTask) HasRepeatAfter() bool {
	if o != nil && !IsNil(o.RepeatAfter) {
		return true
	}

	return false
}

// SetRepeatAfter gets a reference to the given int32 and assigns it to the RepeatAfter field.
func (o *ModelsTask) SetRepeatAfter(v int32) {
	o.RepeatAfter = &v
}

// GetRepeatMode returns the RepeatMode field value if set, zero value otherwise.
func (o *ModelsTask) GetRepeatMode() ModelsTaskRepeatMode {
	if o == nil || IsNil(o.RepeatMode) {
		var ret ModelsTaskRepeatMode
		return ret
	}
	return *o.RepeatMode
}

// GetRepeatModeOk returns a tuple with the RepeatMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetRepeatModeOk() (*ModelsTaskRepeatMode, bool) {
	if o == nil || IsNil(o.RepeatMode) {
		return nil, false
	}
	return o.RepeatMode, true
}

// HasRepeatMode returns a boolean if a field has been set.
func (o *ModelsTask) HasRepeatMode() bool {
	if o != nil && !IsNil(o.RepeatMode) {
		return true
	}

	return false
}

// SetRepeatMode gets a reference to the given ModelsTaskRepeatMode and assigns it to the RepeatMode field.
func (o *ModelsTask) SetRepeatMode(v ModelsTaskRepeatMode) {
	o.RepeatMode = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ModelsTask) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ModelsTask) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ModelsTask) SetStartDate(v string) {
	o.StartDate = &v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *ModelsTask) GetSubscription() ModelsSubscription {
	if o == nil || IsNil(o.Subscription) {
		var ret ModelsSubscription
		return ret
	}
	return *o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetSubscriptionOk() (*ModelsSubscription, bool) {
	if o == nil || IsNil(o.Subscription) {
		return nil, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *ModelsTask) HasSubscription() bool {
	if o != nil && !IsNil(o.Subscription) {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given ModelsSubscription and assigns it to the Subscription field.
func (o *ModelsTask) SetSubscription(v ModelsSubscription) {
	o.Subscription = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ModelsTask) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ModelsTask) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ModelsTask) SetTitle(v string) {
	o.Title = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ModelsTask) GetUpdated() string {
	if o == nil || IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTask) GetUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ModelsTask) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *ModelsTask) SetUpdated(v string) {
	o.Updated = &v
}

func (o ModelsTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assignees) {
		toSerialize["assignees"] = o.Assignees
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.BucketId) {
		toSerialize["bucket_id"] = o.BucketId
	}
	if !IsNil(o.CoverImageAttachmentId) {
		toSerialize["cover_image_attachment_id"] = o.CoverImageAttachmentId
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Done) {
		toSerialize["done"] = o.Done
	}
	if !IsNil(o.DoneAt) {
		toSerialize["done_at"] = o.DoneAt
	}
	if !IsNil(o.DueDate) {
		toSerialize["due_date"] = o.DueDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !IsNil(o.HexColor) {
		toSerialize["hex_color"] = o.HexColor
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.IsFavorite) {
		toSerialize["is_favorite"] = o.IsFavorite
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.PercentDone) {
		toSerialize["percent_done"] = o.PercentDone
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.Reactions) {
		toSerialize["reactions"] = o.Reactions
	}
	if !IsNil(o.RelatedTasks) {
		toSerialize["related_tasks"] = o.RelatedTasks
	}
	if !IsNil(o.Reminders) {
		toSerialize["reminders"] = o.Reminders
	}
	if !IsNil(o.RepeatAfter) {
		toSerialize["repeat_after"] = o.RepeatAfter
	}
	if !IsNil(o.RepeatMode) {
		toSerialize["repeat_mode"] = o.RepeatMode
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.Subscription) {
		toSerialize["subscription"] = o.Subscription
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableModelsTask struct {
	value *ModelsTask
	isSet bool
}

func (v NullableModelsTask) Get() *ModelsTask {
	return v.value
}

func (v *NullableModelsTask) Set(val *ModelsTask) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTask) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTask(val *ModelsTask) *NullableModelsTask {
	return &NullableModelsTask{value: val, isSet: true}
}

func (v NullableModelsTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


