/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelsDatabaseNotifications type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsDatabaseNotifications{}

// ModelsDatabaseNotifications struct for ModelsDatabaseNotifications
type ModelsDatabaseNotifications struct {
	// A timestamp when this notification was created. You cannot change this value.
	Created *string `json:"created,omitempty"`
	// The unique, numeric id of this notification.
	Id *int32 `json:"id,omitempty"`
	// The name of the notification
	Name *string `json:"name,omitempty"`
	// The actual content of the notification.
	Notification map[string]interface{} `json:"notification,omitempty"`
	// Whether or not to mark this notification as read or unread. True is read, false is unread.
	Read *bool `json:"read,omitempty"`
	// When this notification is marked as read, this will be updated with the current timestamp.
	ReadAt *string `json:"read_at,omitempty"`
}

// NewModelsDatabaseNotifications instantiates a new ModelsDatabaseNotifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsDatabaseNotifications() *ModelsDatabaseNotifications {
	this := ModelsDatabaseNotifications{}
	return &this
}

// NewModelsDatabaseNotificationsWithDefaults instantiates a new ModelsDatabaseNotifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsDatabaseNotificationsWithDefaults() *ModelsDatabaseNotifications {
	this := ModelsDatabaseNotifications{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ModelsDatabaseNotifications) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsDatabaseNotifications) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ModelsDatabaseNotifications) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ModelsDatabaseNotifications) SetCreated(v string) {
	o.Created = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsDatabaseNotifications) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsDatabaseNotifications) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsDatabaseNotifications) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsDatabaseNotifications) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelsDatabaseNotifications) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsDatabaseNotifications) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelsDatabaseNotifications) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelsDatabaseNotifications) SetName(v string) {
	o.Name = &v
}

// GetNotification returns the Notification field value if set, zero value otherwise.
func (o *ModelsDatabaseNotifications) GetNotification() map[string]interface{} {
	if o == nil || IsNil(o.Notification) {
		var ret map[string]interface{}
		return ret
	}
	return o.Notification
}

// GetNotificationOk returns a tuple with the Notification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsDatabaseNotifications) GetNotificationOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Notification) {
		return map[string]interface{}{}, false
	}
	return o.Notification, true
}

// HasNotification returns a boolean if a field has been set.
func (o *ModelsDatabaseNotifications) HasNotification() bool {
	if o != nil && !IsNil(o.Notification) {
		return true
	}

	return false
}

// SetNotification gets a reference to the given map[string]interface{} and assigns it to the Notification field.
func (o *ModelsDatabaseNotifications) SetNotification(v map[string]interface{}) {
	o.Notification = v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *ModelsDatabaseNotifications) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsDatabaseNotifications) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *ModelsDatabaseNotifications) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *ModelsDatabaseNotifications) SetRead(v bool) {
	o.Read = &v
}

// GetReadAt returns the ReadAt field value if set, zero value otherwise.
func (o *ModelsDatabaseNotifications) GetReadAt() string {
	if o == nil || IsNil(o.ReadAt) {
		var ret string
		return ret
	}
	return *o.ReadAt
}

// GetReadAtOk returns a tuple with the ReadAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsDatabaseNotifications) GetReadAtOk() (*string, bool) {
	if o == nil || IsNil(o.ReadAt) {
		return nil, false
	}
	return o.ReadAt, true
}

// HasReadAt returns a boolean if a field has been set.
func (o *ModelsDatabaseNotifications) HasReadAt() bool {
	if o != nil && !IsNil(o.ReadAt) {
		return true
	}

	return false
}

// SetReadAt gets a reference to the given string and assigns it to the ReadAt field.
func (o *ModelsDatabaseNotifications) SetReadAt(v string) {
	o.ReadAt = &v
}

func (o ModelsDatabaseNotifications) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsDatabaseNotifications) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Notification) {
		toSerialize["notification"] = o.Notification
	}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if !IsNil(o.ReadAt) {
		toSerialize["read_at"] = o.ReadAt
	}
	return toSerialize, nil
}

type NullableModelsDatabaseNotifications struct {
	value *ModelsDatabaseNotifications
	isSet bool
}

func (v NullableModelsDatabaseNotifications) Get() *ModelsDatabaseNotifications {
	return v.value
}

func (v *NullableModelsDatabaseNotifications) Set(val *ModelsDatabaseNotifications) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsDatabaseNotifications) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsDatabaseNotifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsDatabaseNotifications(val *ModelsDatabaseNotifications) *NullableModelsDatabaseNotifications {
	return &NullableModelsDatabaseNotifications{value: val, isSet: true}
}

func (v NullableModelsDatabaseNotifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsDatabaseNotifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
