/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelsReaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsReaction{}

// ModelsReaction struct for ModelsReaction
type ModelsReaction struct {
	// A timestamp when this reaction was created. You cannot change this value.
	Created *string `json:"created,omitempty"`
	// The user who reacted
	User *UserUser `json:"user,omitempty"`
	// The actual reaction. This can be any valid utf character or text, up to a length of 20.
	Value *string `json:"value,omitempty"`
}

// NewModelsReaction instantiates a new ModelsReaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsReaction() *ModelsReaction {
	this := ModelsReaction{}
	return &this
}

// NewModelsReactionWithDefaults instantiates a new ModelsReaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsReactionWithDefaults() *ModelsReaction {
	this := ModelsReaction{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ModelsReaction) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReaction) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ModelsReaction) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ModelsReaction) SetCreated(v string) {
	o.Created = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ModelsReaction) GetUser() UserUser {
	if o == nil || IsNil(o.User) {
		var ret UserUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReaction) GetUserOk() (*UserUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ModelsReaction) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserUser and assigns it to the User field.
func (o *ModelsReaction) SetUser(v UserUser) {
	o.User = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ModelsReaction) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsReaction) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ModelsReaction) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ModelsReaction) SetValue(v string) {
	o.Value = &v
}

func (o ModelsReaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsReaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableModelsReaction struct {
	value *ModelsReaction
	isSet bool
}

func (v NullableModelsReaction) Get() *ModelsReaction {
	return v.value
}

func (v *NullableModelsReaction) Set(val *ModelsReaction) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsReaction(val *ModelsReaction) *NullableModelsReaction {
	return &NullableModelsReaction{value: val, isSet: true}
}

func (v NullableModelsReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


