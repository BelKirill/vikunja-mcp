/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserEmailUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserEmailUpdate{}

// UserEmailUpdate struct for UserEmailUpdate
type UserEmailUpdate struct {
	// The new email address. Needs to be a valid email address.
	NewEmail *string `json:"new_email,omitempty"`
	// The password of the user for confirmation.
	Password *string `json:"password,omitempty"`
}

// NewUserEmailUpdate instantiates a new UserEmailUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserEmailUpdate() *UserEmailUpdate {
	this := UserEmailUpdate{}
	return &this
}

// NewUserEmailUpdateWithDefaults instantiates a new UserEmailUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserEmailUpdateWithDefaults() *UserEmailUpdate {
	this := UserEmailUpdate{}
	return &this
}

// GetNewEmail returns the NewEmail field value if set, zero value otherwise.
func (o *UserEmailUpdate) GetNewEmail() string {
	if o == nil || IsNil(o.NewEmail) {
		var ret string
		return ret
	}
	return *o.NewEmail
}

// GetNewEmailOk returns a tuple with the NewEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEmailUpdate) GetNewEmailOk() (*string, bool) {
	if o == nil || IsNil(o.NewEmail) {
		return nil, false
	}
	return o.NewEmail, true
}

// HasNewEmail returns a boolean if a field has been set.
func (o *UserEmailUpdate) HasNewEmail() bool {
	if o != nil && !IsNil(o.NewEmail) {
		return true
	}

	return false
}

// SetNewEmail gets a reference to the given string and assigns it to the NewEmail field.
func (o *UserEmailUpdate) SetNewEmail(v string) {
	o.NewEmail = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserEmailUpdate) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserEmailUpdate) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserEmailUpdate) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserEmailUpdate) SetPassword(v string) {
	o.Password = &v
}

func (o UserEmailUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserEmailUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewEmail) {
		toSerialize["new_email"] = o.NewEmail
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableUserEmailUpdate struct {
	value *UserEmailUpdate
	isSet bool
}

func (v NullableUserEmailUpdate) Get() *UserEmailUpdate {
	return v.value
}

func (v *NullableUserEmailUpdate) Set(val *UserEmailUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableUserEmailUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableUserEmailUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserEmailUpdate(val *UserEmailUpdate) *NullableUserEmailUpdate {
	return &NullableUserEmailUpdate{value: val, isSet: true}
}

func (v NullableUserEmailUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserEmailUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
