/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelsTaskPosition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsTaskPosition{}

// ModelsTaskPosition struct for ModelsTaskPosition
type ModelsTaskPosition struct {
	// The position of the task - any task project can be sorted as usual by this parameter. When accessing tasks via kanban buckets, this is primarily used to sort them based on a range We're using a float64 here to make it possible to put any task within any two other tasks (by changing the number). You would calculate the new position between two tasks with something like task3.position = (task2.position - task1.position) / 2. A 64-Bit float leaves plenty of room to initially give tasks a position with 2^16 difference to the previous task which also leaves a lot of room for rearranging and sorting later. Positions are always saved per view. They will automatically be set if you request the tasks through a view endpoint, otherwise they will always be 0. To update them, take a look at the Task Position endpoint.
	Position *float32 `json:"position,omitempty"`
	// The project view this task is related to
	ProjectViewId *int32 `json:"project_view_id,omitempty"`
	// The ID of the task this position is for
	TaskId *int32 `json:"task_id,omitempty"`
}

// NewModelsTaskPosition instantiates a new ModelsTaskPosition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsTaskPosition() *ModelsTaskPosition {
	this := ModelsTaskPosition{}
	return &this
}

// NewModelsTaskPositionWithDefaults instantiates a new ModelsTaskPosition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsTaskPositionWithDefaults() *ModelsTaskPosition {
	this := ModelsTaskPosition{}
	return &this
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ModelsTaskPosition) GetPosition() float32 {
	if o == nil || IsNil(o.Position) {
		var ret float32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTaskPosition) GetPositionOk() (*float32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ModelsTaskPosition) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given float32 and assigns it to the Position field.
func (o *ModelsTaskPosition) SetPosition(v float32) {
	o.Position = &v
}

// GetProjectViewId returns the ProjectViewId field value if set, zero value otherwise.
func (o *ModelsTaskPosition) GetProjectViewId() int32 {
	if o == nil || IsNil(o.ProjectViewId) {
		var ret int32
		return ret
	}
	return *o.ProjectViewId
}

// GetProjectViewIdOk returns a tuple with the ProjectViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTaskPosition) GetProjectViewIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectViewId) {
		return nil, false
	}
	return o.ProjectViewId, true
}

// HasProjectViewId returns a boolean if a field has been set.
func (o *ModelsTaskPosition) HasProjectViewId() bool {
	if o != nil && !IsNil(o.ProjectViewId) {
		return true
	}

	return false
}

// SetProjectViewId gets a reference to the given int32 and assigns it to the ProjectViewId field.
func (o *ModelsTaskPosition) SetProjectViewId(v int32) {
	o.ProjectViewId = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *ModelsTaskPosition) GetTaskId() int32 {
	if o == nil || IsNil(o.TaskId) {
		var ret int32
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTaskPosition) GetTaskIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TaskId) {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *ModelsTaskPosition) HasTaskId() bool {
	if o != nil && !IsNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given int32 and assigns it to the TaskId field.
func (o *ModelsTaskPosition) SetTaskId(v int32) {
	o.TaskId = &v
}

func (o ModelsTaskPosition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsTaskPosition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.ProjectViewId) {
		toSerialize["project_view_id"] = o.ProjectViewId
	}
	if !IsNil(o.TaskId) {
		toSerialize["task_id"] = o.TaskId
	}
	return toSerialize, nil
}

type NullableModelsTaskPosition struct {
	value *ModelsTaskPosition
	isSet bool
}

func (v NullableModelsTaskPosition) Get() *ModelsTaskPosition {
	return v.value
}

func (v *NullableModelsTaskPosition) Set(val *ModelsTaskPosition) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTaskPosition) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTaskPosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTaskPosition(val *ModelsTaskPosition) *NullableModelsTaskPosition {
	return &NullableModelsTaskPosition{value: val, isSet: true}
}

func (v NullableModelsTaskPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTaskPosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
