/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1VikunjaInfos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1VikunjaInfos{}

// V1VikunjaInfos struct for V1VikunjaInfos
type V1VikunjaInfos struct {
	Auth *V1AuthInfo `json:"auth,omitempty"`
	AvailableMigrators []string `json:"available_migrators,omitempty"`
	CaldavEnabled *bool `json:"caldav_enabled,omitempty"`
	DemoModeEnabled *bool `json:"demo_mode_enabled,omitempty"`
	EmailRemindersEnabled *bool `json:"email_reminders_enabled,omitempty"`
	EnabledBackgroundProviders []string `json:"enabled_background_providers,omitempty"`
	FrontendUrl *string `json:"frontend_url,omitempty"`
	Legal *V1LegalInfo `json:"legal,omitempty"`
	LinkSharingEnabled *bool `json:"link_sharing_enabled,omitempty"`
	MaxFileSize *string `json:"max_file_size,omitempty"`
	Motd *string `json:"motd,omitempty"`
	PublicTeamsEnabled *bool `json:"public_teams_enabled,omitempty"`
	RegistrationEnabled *bool `json:"registration_enabled,omitempty"`
	TaskAttachmentsEnabled *bool `json:"task_attachments_enabled,omitempty"`
	TaskCommentsEnabled *bool `json:"task_comments_enabled,omitempty"`
	TotpEnabled *bool `json:"totp_enabled,omitempty"`
	UserDeletionEnabled *bool `json:"user_deletion_enabled,omitempty"`
	Version *string `json:"version,omitempty"`
	WebhooksEnabled *bool `json:"webhooks_enabled,omitempty"`
}

// NewV1VikunjaInfos instantiates a new V1VikunjaInfos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1VikunjaInfos() *V1VikunjaInfos {
	this := V1VikunjaInfos{}
	return &this
}

// NewV1VikunjaInfosWithDefaults instantiates a new V1VikunjaInfos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1VikunjaInfosWithDefaults() *V1VikunjaInfos {
	this := V1VikunjaInfos{}
	return &this
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetAuth() V1AuthInfo {
	if o == nil || IsNil(o.Auth) {
		var ret V1AuthInfo
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetAuthOk() (*V1AuthInfo, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given V1AuthInfo and assigns it to the Auth field.
func (o *V1VikunjaInfos) SetAuth(v V1AuthInfo) {
	o.Auth = &v
}

// GetAvailableMigrators returns the AvailableMigrators field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetAvailableMigrators() []string {
	if o == nil || IsNil(o.AvailableMigrators) {
		var ret []string
		return ret
	}
	return o.AvailableMigrators
}

// GetAvailableMigratorsOk returns a tuple with the AvailableMigrators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetAvailableMigratorsOk() ([]string, bool) {
	if o == nil || IsNil(o.AvailableMigrators) {
		return nil, false
	}
	return o.AvailableMigrators, true
}

// HasAvailableMigrators returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasAvailableMigrators() bool {
	if o != nil && !IsNil(o.AvailableMigrators) {
		return true
	}

	return false
}

// SetAvailableMigrators gets a reference to the given []string and assigns it to the AvailableMigrators field.
func (o *V1VikunjaInfos) SetAvailableMigrators(v []string) {
	o.AvailableMigrators = v
}

// GetCaldavEnabled returns the CaldavEnabled field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetCaldavEnabled() bool {
	if o == nil || IsNil(o.CaldavEnabled) {
		var ret bool
		return ret
	}
	return *o.CaldavEnabled
}

// GetCaldavEnabledOk returns a tuple with the CaldavEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetCaldavEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CaldavEnabled) {
		return nil, false
	}
	return o.CaldavEnabled, true
}

// HasCaldavEnabled returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasCaldavEnabled() bool {
	if o != nil && !IsNil(o.CaldavEnabled) {
		return true
	}

	return false
}

// SetCaldavEnabled gets a reference to the given bool and assigns it to the CaldavEnabled field.
func (o *V1VikunjaInfos) SetCaldavEnabled(v bool) {
	o.CaldavEnabled = &v
}

// GetDemoModeEnabled returns the DemoModeEnabled field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetDemoModeEnabled() bool {
	if o == nil || IsNil(o.DemoModeEnabled) {
		var ret bool
		return ret
	}
	return *o.DemoModeEnabled
}

// GetDemoModeEnabledOk returns a tuple with the DemoModeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetDemoModeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DemoModeEnabled) {
		return nil, false
	}
	return o.DemoModeEnabled, true
}

// HasDemoModeEnabled returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasDemoModeEnabled() bool {
	if o != nil && !IsNil(o.DemoModeEnabled) {
		return true
	}

	return false
}

// SetDemoModeEnabled gets a reference to the given bool and assigns it to the DemoModeEnabled field.
func (o *V1VikunjaInfos) SetDemoModeEnabled(v bool) {
	o.DemoModeEnabled = &v
}

// GetEmailRemindersEnabled returns the EmailRemindersEnabled field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetEmailRemindersEnabled() bool {
	if o == nil || IsNil(o.EmailRemindersEnabled) {
		var ret bool
		return ret
	}
	return *o.EmailRemindersEnabled
}

// GetEmailRemindersEnabledOk returns a tuple with the EmailRemindersEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetEmailRemindersEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailRemindersEnabled) {
		return nil, false
	}
	return o.EmailRemindersEnabled, true
}

// HasEmailRemindersEnabled returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasEmailRemindersEnabled() bool {
	if o != nil && !IsNil(o.EmailRemindersEnabled) {
		return true
	}

	return false
}

// SetEmailRemindersEnabled gets a reference to the given bool and assigns it to the EmailRemindersEnabled field.
func (o *V1VikunjaInfos) SetEmailRemindersEnabled(v bool) {
	o.EmailRemindersEnabled = &v
}

// GetEnabledBackgroundProviders returns the EnabledBackgroundProviders field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetEnabledBackgroundProviders() []string {
	if o == nil || IsNil(o.EnabledBackgroundProviders) {
		var ret []string
		return ret
	}
	return o.EnabledBackgroundProviders
}

// GetEnabledBackgroundProvidersOk returns a tuple with the EnabledBackgroundProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetEnabledBackgroundProvidersOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledBackgroundProviders) {
		return nil, false
	}
	return o.EnabledBackgroundProviders, true
}

// HasEnabledBackgroundProviders returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasEnabledBackgroundProviders() bool {
	if o != nil && !IsNil(o.EnabledBackgroundProviders) {
		return true
	}

	return false
}

// SetEnabledBackgroundProviders gets a reference to the given []string and assigns it to the EnabledBackgroundProviders field.
func (o *V1VikunjaInfos) SetEnabledBackgroundProviders(v []string) {
	o.EnabledBackgroundProviders = v
}

// GetFrontendUrl returns the FrontendUrl field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetFrontendUrl() string {
	if o == nil || IsNil(o.FrontendUrl) {
		var ret string
		return ret
	}
	return *o.FrontendUrl
}

// GetFrontendUrlOk returns a tuple with the FrontendUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetFrontendUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FrontendUrl) {
		return nil, false
	}
	return o.FrontendUrl, true
}

// HasFrontendUrl returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasFrontendUrl() bool {
	if o != nil && !IsNil(o.FrontendUrl) {
		return true
	}

	return false
}

// SetFrontendUrl gets a reference to the given string and assigns it to the FrontendUrl field.
func (o *V1VikunjaInfos) SetFrontendUrl(v string) {
	o.FrontendUrl = &v
}

// GetLegal returns the Legal field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetLegal() V1LegalInfo {
	if o == nil || IsNil(o.Legal) {
		var ret V1LegalInfo
		return ret
	}
	return *o.Legal
}

// GetLegalOk returns a tuple with the Legal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetLegalOk() (*V1LegalInfo, bool) {
	if o == nil || IsNil(o.Legal) {
		return nil, false
	}
	return o.Legal, true
}

// HasLegal returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasLegal() bool {
	if o != nil && !IsNil(o.Legal) {
		return true
	}

	return false
}

// SetLegal gets a reference to the given V1LegalInfo and assigns it to the Legal field.
func (o *V1VikunjaInfos) SetLegal(v V1LegalInfo) {
	o.Legal = &v
}

// GetLinkSharingEnabled returns the LinkSharingEnabled field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetLinkSharingEnabled() bool {
	if o == nil || IsNil(o.LinkSharingEnabled) {
		var ret bool
		return ret
	}
	return *o.LinkSharingEnabled
}

// GetLinkSharingEnabledOk returns a tuple with the LinkSharingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetLinkSharingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LinkSharingEnabled) {
		return nil, false
	}
	return o.LinkSharingEnabled, true
}

// HasLinkSharingEnabled returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasLinkSharingEnabled() bool {
	if o != nil && !IsNil(o.LinkSharingEnabled) {
		return true
	}

	return false
}

// SetLinkSharingEnabled gets a reference to the given bool and assigns it to the LinkSharingEnabled field.
func (o *V1VikunjaInfos) SetLinkSharingEnabled(v bool) {
	o.LinkSharingEnabled = &v
}

// GetMaxFileSize returns the MaxFileSize field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetMaxFileSize() string {
	if o == nil || IsNil(o.MaxFileSize) {
		var ret string
		return ret
	}
	return *o.MaxFileSize
}

// GetMaxFileSizeOk returns a tuple with the MaxFileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetMaxFileSizeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxFileSize) {
		return nil, false
	}
	return o.MaxFileSize, true
}

// HasMaxFileSize returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasMaxFileSize() bool {
	if o != nil && !IsNil(o.MaxFileSize) {
		return true
	}

	return false
}

// SetMaxFileSize gets a reference to the given string and assigns it to the MaxFileSize field.
func (o *V1VikunjaInfos) SetMaxFileSize(v string) {
	o.MaxFileSize = &v
}

// GetMotd returns the Motd field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetMotd() string {
	if o == nil || IsNil(o.Motd) {
		var ret string
		return ret
	}
	return *o.Motd
}

// GetMotdOk returns a tuple with the Motd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetMotdOk() (*string, bool) {
	if o == nil || IsNil(o.Motd) {
		return nil, false
	}
	return o.Motd, true
}

// HasMotd returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasMotd() bool {
	if o != nil && !IsNil(o.Motd) {
		return true
	}

	return false
}

// SetMotd gets a reference to the given string and assigns it to the Motd field.
func (o *V1VikunjaInfos) SetMotd(v string) {
	o.Motd = &v
}

// GetPublicTeamsEnabled returns the PublicTeamsEnabled field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetPublicTeamsEnabled() bool {
	if o == nil || IsNil(o.PublicTeamsEnabled) {
		var ret bool
		return ret
	}
	return *o.PublicTeamsEnabled
}

// GetPublicTeamsEnabledOk returns a tuple with the PublicTeamsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetPublicTeamsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PublicTeamsEnabled) {
		return nil, false
	}
	return o.PublicTeamsEnabled, true
}

// HasPublicTeamsEnabled returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasPublicTeamsEnabled() bool {
	if o != nil && !IsNil(o.PublicTeamsEnabled) {
		return true
	}

	return false
}

// SetPublicTeamsEnabled gets a reference to the given bool and assigns it to the PublicTeamsEnabled field.
func (o *V1VikunjaInfos) SetPublicTeamsEnabled(v bool) {
	o.PublicTeamsEnabled = &v
}

// GetRegistrationEnabled returns the RegistrationEnabled field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetRegistrationEnabled() bool {
	if o == nil || IsNil(o.RegistrationEnabled) {
		var ret bool
		return ret
	}
	return *o.RegistrationEnabled
}

// GetRegistrationEnabledOk returns a tuple with the RegistrationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetRegistrationEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RegistrationEnabled) {
		return nil, false
	}
	return o.RegistrationEnabled, true
}

// HasRegistrationEnabled returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasRegistrationEnabled() bool {
	if o != nil && !IsNil(o.RegistrationEnabled) {
		return true
	}

	return false
}

// SetRegistrationEnabled gets a reference to the given bool and assigns it to the RegistrationEnabled field.
func (o *V1VikunjaInfos) SetRegistrationEnabled(v bool) {
	o.RegistrationEnabled = &v
}

// GetTaskAttachmentsEnabled returns the TaskAttachmentsEnabled field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetTaskAttachmentsEnabled() bool {
	if o == nil || IsNil(o.TaskAttachmentsEnabled) {
		var ret bool
		return ret
	}
	return *o.TaskAttachmentsEnabled
}

// GetTaskAttachmentsEnabledOk returns a tuple with the TaskAttachmentsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetTaskAttachmentsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TaskAttachmentsEnabled) {
		return nil, false
	}
	return o.TaskAttachmentsEnabled, true
}

// HasTaskAttachmentsEnabled returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasTaskAttachmentsEnabled() bool {
	if o != nil && !IsNil(o.TaskAttachmentsEnabled) {
		return true
	}

	return false
}

// SetTaskAttachmentsEnabled gets a reference to the given bool and assigns it to the TaskAttachmentsEnabled field.
func (o *V1VikunjaInfos) SetTaskAttachmentsEnabled(v bool) {
	o.TaskAttachmentsEnabled = &v
}

// GetTaskCommentsEnabled returns the TaskCommentsEnabled field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetTaskCommentsEnabled() bool {
	if o == nil || IsNil(o.TaskCommentsEnabled) {
		var ret bool
		return ret
	}
	return *o.TaskCommentsEnabled
}

// GetTaskCommentsEnabledOk returns a tuple with the TaskCommentsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetTaskCommentsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TaskCommentsEnabled) {
		return nil, false
	}
	return o.TaskCommentsEnabled, true
}

// HasTaskCommentsEnabled returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasTaskCommentsEnabled() bool {
	if o != nil && !IsNil(o.TaskCommentsEnabled) {
		return true
	}

	return false
}

// SetTaskCommentsEnabled gets a reference to the given bool and assigns it to the TaskCommentsEnabled field.
func (o *V1VikunjaInfos) SetTaskCommentsEnabled(v bool) {
	o.TaskCommentsEnabled = &v
}

// GetTotpEnabled returns the TotpEnabled field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetTotpEnabled() bool {
	if o == nil || IsNil(o.TotpEnabled) {
		var ret bool
		return ret
	}
	return *o.TotpEnabled
}

// GetTotpEnabledOk returns a tuple with the TotpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetTotpEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TotpEnabled) {
		return nil, false
	}
	return o.TotpEnabled, true
}

// HasTotpEnabled returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasTotpEnabled() bool {
	if o != nil && !IsNil(o.TotpEnabled) {
		return true
	}

	return false
}

// SetTotpEnabled gets a reference to the given bool and assigns it to the TotpEnabled field.
func (o *V1VikunjaInfos) SetTotpEnabled(v bool) {
	o.TotpEnabled = &v
}

// GetUserDeletionEnabled returns the UserDeletionEnabled field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetUserDeletionEnabled() bool {
	if o == nil || IsNil(o.UserDeletionEnabled) {
		var ret bool
		return ret
	}
	return *o.UserDeletionEnabled
}

// GetUserDeletionEnabledOk returns a tuple with the UserDeletionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetUserDeletionEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UserDeletionEnabled) {
		return nil, false
	}
	return o.UserDeletionEnabled, true
}

// HasUserDeletionEnabled returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasUserDeletionEnabled() bool {
	if o != nil && !IsNil(o.UserDeletionEnabled) {
		return true
	}

	return false
}

// SetUserDeletionEnabled gets a reference to the given bool and assigns it to the UserDeletionEnabled field.
func (o *V1VikunjaInfos) SetUserDeletionEnabled(v bool) {
	o.UserDeletionEnabled = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *V1VikunjaInfos) SetVersion(v string) {
	o.Version = &v
}

// GetWebhooksEnabled returns the WebhooksEnabled field value if set, zero value otherwise.
func (o *V1VikunjaInfos) GetWebhooksEnabled() bool {
	if o == nil || IsNil(o.WebhooksEnabled) {
		var ret bool
		return ret
	}
	return *o.WebhooksEnabled
}

// GetWebhooksEnabledOk returns a tuple with the WebhooksEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VikunjaInfos) GetWebhooksEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.WebhooksEnabled) {
		return nil, false
	}
	return o.WebhooksEnabled, true
}

// HasWebhooksEnabled returns a boolean if a field has been set.
func (o *V1VikunjaInfos) HasWebhooksEnabled() bool {
	if o != nil && !IsNil(o.WebhooksEnabled) {
		return true
	}

	return false
}

// SetWebhooksEnabled gets a reference to the given bool and assigns it to the WebhooksEnabled field.
func (o *V1VikunjaInfos) SetWebhooksEnabled(v bool) {
	o.WebhooksEnabled = &v
}

func (o V1VikunjaInfos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1VikunjaInfos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	if !IsNil(o.AvailableMigrators) {
		toSerialize["available_migrators"] = o.AvailableMigrators
	}
	if !IsNil(o.CaldavEnabled) {
		toSerialize["caldav_enabled"] = o.CaldavEnabled
	}
	if !IsNil(o.DemoModeEnabled) {
		toSerialize["demo_mode_enabled"] = o.DemoModeEnabled
	}
	if !IsNil(o.EmailRemindersEnabled) {
		toSerialize["email_reminders_enabled"] = o.EmailRemindersEnabled
	}
	if !IsNil(o.EnabledBackgroundProviders) {
		toSerialize["enabled_background_providers"] = o.EnabledBackgroundProviders
	}
	if !IsNil(o.FrontendUrl) {
		toSerialize["frontend_url"] = o.FrontendUrl
	}
	if !IsNil(o.Legal) {
		toSerialize["legal"] = o.Legal
	}
	if !IsNil(o.LinkSharingEnabled) {
		toSerialize["link_sharing_enabled"] = o.LinkSharingEnabled
	}
	if !IsNil(o.MaxFileSize) {
		toSerialize["max_file_size"] = o.MaxFileSize
	}
	if !IsNil(o.Motd) {
		toSerialize["motd"] = o.Motd
	}
	if !IsNil(o.PublicTeamsEnabled) {
		toSerialize["public_teams_enabled"] = o.PublicTeamsEnabled
	}
	if !IsNil(o.RegistrationEnabled) {
		toSerialize["registration_enabled"] = o.RegistrationEnabled
	}
	if !IsNil(o.TaskAttachmentsEnabled) {
		toSerialize["task_attachments_enabled"] = o.TaskAttachmentsEnabled
	}
	if !IsNil(o.TaskCommentsEnabled) {
		toSerialize["task_comments_enabled"] = o.TaskCommentsEnabled
	}
	if !IsNil(o.TotpEnabled) {
		toSerialize["totp_enabled"] = o.TotpEnabled
	}
	if !IsNil(o.UserDeletionEnabled) {
		toSerialize["user_deletion_enabled"] = o.UserDeletionEnabled
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.WebhooksEnabled) {
		toSerialize["webhooks_enabled"] = o.WebhooksEnabled
	}
	return toSerialize, nil
}

type NullableV1VikunjaInfos struct {
	value *V1VikunjaInfos
	isSet bool
}

func (v NullableV1VikunjaInfos) Get() *V1VikunjaInfos {
	return v.value
}

func (v *NullableV1VikunjaInfos) Set(val *V1VikunjaInfos) {
	v.value = val
	v.isSet = true
}

func (v NullableV1VikunjaInfos) IsSet() bool {
	return v.isSet
}

func (v *NullableV1VikunjaInfos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1VikunjaInfos(val *V1VikunjaInfos) *NullableV1VikunjaInfos {
	return &NullableV1VikunjaInfos{value: val, isSet: true}
}

func (v NullableV1VikunjaInfos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1VikunjaInfos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


