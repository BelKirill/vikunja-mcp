/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ModelsReminderRelation the model 'ModelsReminderRelation'
type ModelsReminderRelation string

// List of models.ReminderRelation
const (
	ReminderRelationDueDate   ModelsReminderRelation = "due_date"
	ReminderRelationStartDate ModelsReminderRelation = "start_date"
	ReminderRelationEndDate   ModelsReminderRelation = "end_date"
)

// All allowed values of ModelsReminderRelation enum
var AllowedModelsReminderRelationEnumValues = []ModelsReminderRelation{
	"due_date",
	"start_date",
	"end_date",
}

func (v *ModelsReminderRelation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelsReminderRelation(value)
	for _, existing := range AllowedModelsReminderRelationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelsReminderRelation", value)
}

// NewModelsReminderRelationFromValue returns a pointer to a valid ModelsReminderRelation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelsReminderRelationFromValue(v string) (*ModelsReminderRelation, error) {
	ev := ModelsReminderRelation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelsReminderRelation: valid values are %v", v, AllowedModelsReminderRelationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelsReminderRelation) IsValid() bool {
	for _, existing := range AllowedModelsReminderRelationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to models.ReminderRelation value
func (v ModelsReminderRelation) Ptr() *ModelsReminderRelation {
	return &v
}

type NullableModelsReminderRelation struct {
	value *ModelsReminderRelation
	isSet bool
}

func (v NullableModelsReminderRelation) Get() *ModelsReminderRelation {
	return v.value
}

func (v *NullableModelsReminderRelation) Set(val *ModelsReminderRelation) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsReminderRelation) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsReminderRelation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsReminderRelation(val *ModelsReminderRelation) *NullableModelsReminderRelation {
	return &NullableModelsReminderRelation{value: val, isSet: true}
}

func (v NullableModelsReminderRelation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsReminderRelation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
