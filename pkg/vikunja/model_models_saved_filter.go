/*
Vikunja API

# Pagination Every endpoint capable of pagination will return two headers: * `x-pagination-total-pages`: The total number of available pages for this request * `x-pagination-result-count`: The number of items returned for this request. # Rights All endpoints which return a single item (project, task, etc.) - no array - will also return a `x-max-right` header with the max right the user has on this item as an int where `0` is `Read Only`, `1` is `Read & Write` and `2` is `Admin`. This can be used to show or hide ui elements based on the rights the user has. # Errors All errors have an error code and a human-readable error message in addition to the http status code. You should always check for the status code in the response, not only the http status code. Due to limitations in the swagger library we're using for this document, only one error per http status code is documented here. Make sure to check the [error docs](https://vikunja.io/docs/errors/) in Vikunja's documentation for a full list of available error codes. # Authorization **JWT-Auth:** Main authorization method, used for most of the requests. Needs `Authorization: Bearer <jwt-token>`-header to authenticate successfully.  **API Token:** You can create scoped API tokens for your user and use the token to make authenticated requests in the context of that user. The token must be provided via an `Authorization: Bearer <token>` header, similar to jwt auth. See the documentation for the `api` group to manage token creation and revocation.  **BasicAuth:** Only used when requesting tasks via CalDAV. <!-- ReDoc-Inject: <security-definitions> -->

API version: v0.24.6
Contact: hello@vikunja.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelsSavedFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsSavedFilter{}

// ModelsSavedFilter struct for ModelsSavedFilter
type ModelsSavedFilter struct {
	// A timestamp when this filter was created. You cannot change this value.
	Created *string `json:"created,omitempty"`
	// The description of the filter
	Description *string `json:"description,omitempty"`
	// The actual filters this filter contains
	Filters *ModelsTaskCollection `json:"filters,omitempty"`
	// The unique numeric id of this saved filter
	Id *int32 `json:"id,omitempty"`
	// True if the filter is a favorite. Favorite filters show up in a separate parent project together with favorite projects.
	IsFavorite *bool `json:"is_favorite,omitempty"`
	// The user who owns this filter
	Owner *UserUser `json:"owner,omitempty"`
	// The title of the filter.
	Title *string `json:"title,omitempty"`
	// A timestamp when this filter was last updated. You cannot change this value.
	Updated *string `json:"updated,omitempty"`
}

// NewModelsSavedFilter instantiates a new ModelsSavedFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsSavedFilter() *ModelsSavedFilter {
	this := ModelsSavedFilter{}
	return &this
}

// NewModelsSavedFilterWithDefaults instantiates a new ModelsSavedFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsSavedFilterWithDefaults() *ModelsSavedFilter {
	this := ModelsSavedFilter{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ModelsSavedFilter) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSavedFilter) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ModelsSavedFilter) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *ModelsSavedFilter) SetCreated(v string) {
	o.Created = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelsSavedFilter) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSavedFilter) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelsSavedFilter) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelsSavedFilter) SetDescription(v string) {
	o.Description = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ModelsSavedFilter) GetFilters() ModelsTaskCollection {
	if o == nil || IsNil(o.Filters) {
		var ret ModelsTaskCollection
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSavedFilter) GetFiltersOk() (*ModelsTaskCollection, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ModelsSavedFilter) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given ModelsTaskCollection and assigns it to the Filters field.
func (o *ModelsSavedFilter) SetFilters(v ModelsTaskCollection) {
	o.Filters = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsSavedFilter) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSavedFilter) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsSavedFilter) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *ModelsSavedFilter) SetId(v int32) {
	o.Id = &v
}

// GetIsFavorite returns the IsFavorite field value if set, zero value otherwise.
func (o *ModelsSavedFilter) GetIsFavorite() bool {
	if o == nil || IsNil(o.IsFavorite) {
		var ret bool
		return ret
	}
	return *o.IsFavorite
}

// GetIsFavoriteOk returns a tuple with the IsFavorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSavedFilter) GetIsFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFavorite) {
		return nil, false
	}
	return o.IsFavorite, true
}

// HasIsFavorite returns a boolean if a field has been set.
func (o *ModelsSavedFilter) HasIsFavorite() bool {
	if o != nil && !IsNil(o.IsFavorite) {
		return true
	}

	return false
}

// SetIsFavorite gets a reference to the given bool and assigns it to the IsFavorite field.
func (o *ModelsSavedFilter) SetIsFavorite(v bool) {
	o.IsFavorite = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ModelsSavedFilter) GetOwner() UserUser {
	if o == nil || IsNil(o.Owner) {
		var ret UserUser
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSavedFilter) GetOwnerOk() (*UserUser, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ModelsSavedFilter) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given UserUser and assigns it to the Owner field.
func (o *ModelsSavedFilter) SetOwner(v UserUser) {
	o.Owner = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ModelsSavedFilter) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSavedFilter) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ModelsSavedFilter) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ModelsSavedFilter) SetTitle(v string) {
	o.Title = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ModelsSavedFilter) GetUpdated() string {
	if o == nil || IsNil(o.Updated) {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSavedFilter) GetUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ModelsSavedFilter) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *ModelsSavedFilter) SetUpdated(v string) {
	o.Updated = &v
}

func (o ModelsSavedFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsSavedFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsFavorite) {
		toSerialize["is_favorite"] = o.IsFavorite
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableModelsSavedFilter struct {
	value *ModelsSavedFilter
	isSet bool
}

func (v NullableModelsSavedFilter) Get() *ModelsSavedFilter {
	return v.value
}

func (v *NullableModelsSavedFilter) Set(val *ModelsSavedFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsSavedFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsSavedFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsSavedFilter(val *ModelsSavedFilter) *NullableModelsSavedFilter {
	return &NullableModelsSavedFilter{value: val, isSet: true}
}

func (v NullableModelsSavedFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsSavedFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
